  /// \file TreeStructureAlgorithm.cc
/*
 *
 * TreeStructureAlgorithm.cc source template automatically generated by a class generator
 * Creation date : jeu. nov. 19 2015
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "ArborUtility/TreeStructureAlgorithm.h"

#include "Pandora/AlgorithmHeaders.h"

namespace arbor_content
{

unsigned int TreeStructureAlgorithm::m_instanceId = 0;

pandora::StatusCode TreeStructureAlgorithm::Run()
{
	const pandora::ClusterList *pClusterList = NULL;

	if(!m_clusterListName.empty())
	{
		PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentList(*this, pClusterList));
	}
	else
	{
		PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetList(*this, m_clusterListName, pClusterList));
	}

	if(pClusterList->empty())
		return pandora::STATUS_CODE_SUCCESS;

	std::string currentListName;
	PANDORA_THROW_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentListName<pandora::CaloHit>(*this, currentListName));

	for(pandora::ClusterList::const_iterator iter = pClusterList->begin(), endIter = pClusterList->end() ;
			endIter != iter ; ++iter)
	{
		const pandora::Cluster *const pCluster = *iter;
		pandora::CaloHitList clusterCaloHitList;
		pCluster->GetOrderedCaloHitList().GetCaloHitList(clusterCaloHitList);

		if(clusterCaloHitList.empty())
			continue;

		std::stringstream temporaryListName;
		temporaryListName << "TreeStructureAlgorithm_" << m_instanceId;
		m_instanceId++;

		try
		{
			// prepare calo hit list for tree structure formation
			PANDORA_THROW_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::SaveList(*this, clusterCaloHitList, temporaryListName.str()));
			PANDORA_THROW_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::ReplaceCurrentList<pandora::CaloHit>(*this, temporaryListName.str()));

			// run seeding algorithm
			PANDORA_THROW_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::RunDaughterAlgorithm(*this, m_seedingAlgorithmName));

			// run cleaning algorithm
			PANDORA_THROW_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::RunDaughterAlgorithm(*this, m_cleaningAlgorithmName));

			// drop temporary (and current) list
			PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::DropCurrentList<pandora::CaloHit>(*this));
		}
		catch(const pandora::StatusCodeException &exception)
		{
			std::string tempListName;
			PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentListName<pandora::CaloHit>(*this, tempListName));

			if(tempListName == temporaryListName.str())
			{
				PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::DropCurrentList<pandora::CaloHit>(*this));
			}
		}

		m_instanceId --;
	}

	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::ReplaceCurrentList<pandora::CaloHit>(*this, currentListName));

	return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode TreeStructureAlgorithm::ReadSettings(const pandora::TiXmlHandle xmlHandle)
{
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pandora::XmlHelper::ProcessAlgorithm(*this, xmlHandle,
        "ConnectorSeeding", m_seedingAlgorithmName));

    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pandora::XmlHelper::ProcessAlgorithm(*this, xmlHandle,
        "ConnectorCleaning", m_cleaningAlgorithmName));

	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
		"ClusterListName", m_clusterListName));

	return pandora::STATUS_CODE_SUCCESS;
}

} 

