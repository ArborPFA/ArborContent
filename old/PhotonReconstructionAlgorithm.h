  /// \file PhotonReconstructionAlgorithm.h
/*
 *
 * PhotonReconstructionAlgorithm.h header template automatically generated by a class generator
 * Creation date : lun. juin 6 2016
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Eté Rémi
 * @copyright CNRS , IPNL
 */


#ifndef PHOTONRECONSTRUCTIONALGORITHM_H
#define PHOTONRECONSTRUCTIONALGORITHM_H

#include "Pandora/Algorithm.h"
#include "Api/PandoraContentApi.h"

namespace arbor_content
{

/**
 *  @brief  ShowerBin class
 */
class ShowerBin
{
public:
	/**
	 *  @brief  Constructor
	 */
	ShowerBin();

	/**
	 *  @brief  Add calo hit to the bin
	 */
	void Add(const pandora::CaloHit *const pCaloHit);

	/**
	 *  @brief  Add calo hit list to the bin
	 */
	void Add(const pandora::CaloHitList &caloHitList);

	/**
	 *  @brief  Assign the calo hit list to the bin
	 */
	void Assign(const pandora::CaloHitList &caloHitList);

	/**
	 *
	 */
	const pandora::CaloHitList &GetCaloHitList() const;

	/**
	 *
	 */
	pandora::CaloHitList GetAvailableCaloHitList(const pandora::Algorithm &algorithm) const;

	/**
	 *
	 */
	float GetAvailableEnergy(const pandora::Algorithm &algorithm) const;

	/**
	 *
	 */
	float GetEnergy() const;

	/**
	 *
	 */
	bool IsAvailable() const;

	/**
	 *
	 */
	void SetAvailability(bool availability);

private:
	/**
	 *
	 */
	void CalculateProperties();

private:
	pandora::CaloHitList    m_caloHitList;
	float                   m_energy;
	bool                    m_isAvailable;
	bool                    m_isUpToDate;
};

//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

/**
 *
 */
class Shower2DHistogram
{
public:
    /**
     *  @brief  Constructor
     *
     *  @param  nBinsX number of x bins
     *  @param  xLow min binned x value
     *  @param  xHigh max binned x value
     *  @param  nBinsY number of y bins
     *  @param  yLow min binned y value
     *  @param  yHigh max binned y value
     */
	Shower2DHistogram(const unsigned int nBinsX, const float xLow, const float xHigh, const unsigned int nBinsY, const float yLow,
        const float yHigh);

    /**
     *  @brief  Copy constructor
     *
     *  @param  rhs the histogram to copy
     */
	Shower2DHistogram(const Shower2DHistogram &rhs);

    /**
     *  @brief  Get the number of x bins
     *
     *  @return The number of x bins
     */
    int GetNBinsX() const;

    /**
     *  @brief  Get the min binned x value
     *
     *  @return The min binned x value
     */
    float GetXLow() const;

    /**
     *  @brief  Get the max binned x value
     *
     *  @return The max binned x value
     */
    float GetXHigh() const;

    /**
     *  @brief  Get the x bin width
     *
     *  @return The x bin width
     */
    float GetXBinWidth() const;

    /**
     *  @brief  Get the bin for the x value
     *
     *  @param  xValue the x value
     *  @return The bin for the x value
     */
    int GetBinX(float xValue);

    /**
     *  @brief  Get the number of y bins
     *
     *  @return The number of y bins
     */
    int GetNBinsY() const;

    /**
     *  @brief  Get the min binned y value
     *
     *  @return The min binned y value
     */
    float GetYLow() const;

    /**
     *  @brief  Get the max binned y value
     *
     *  @return The max binned y value
     */
    float GetYHigh() const;

    /**
     *  @brief  Get the y bin width
     *
     *  @return The y bin width
     */
    float GetYBinWidth() const;

    /**
     *  @brief  Get the bin for the y value
     *
     *  @param  xValue the y value
     *  @return The bin for the y value
     */
    int GetBinY(float yValue);

    /**
     *  @brief  Get the number of calo hits in a specified bin
     *
     *  @param  binX the specified x bin number
     *  @param  binY the specified y bin number
     *
     *  @return The number of calo hits in the specified bin
     */
    unsigned int GetBinNCaloHits(const int binX, const int binY) const;

    /**
     *  @brief  Get the number of available calo hits in a specified bin
     *
     *  @param  algorithm to access the calo hit availability
     *  @param  binX the specified x bin number
     *  @param  binY the specified y bin number
     *
     *  @return The number of available calo hits in the specified bin
     */
    unsigned int GetBinNAvailableCaloHits(const pandora::Algorithm &algorithm, const int binX, const int binY) const;

    /**
     *  @brief  Get the calo hits in a specified bin
     *
     *  @param  binX the specified x bin number
     *  @param  binY the specified y bin number
     *
     *  @return The calo hits in the specified bin
     */
    pandora::CaloHitList GetBinCaloHitList(const int binX, const int binY) const;

    /**
     *  @brief  Get the available calo hits in a specified bin
     *
     *  @param  algorithm to access the calo hit availability
     *  @param  binX the specified x bin number
     *  @param  binY the specified y bin number
     *
     *  @return The available calo hits in the specified bin
     */
    pandora::CaloHitList GetBinAvailableCaloHitList(const pandora::Algorithm &algorithm, const int binX, const int binY) const;

    /**
     *  @brief  Get the energy in a specified bin
     *
     *  @param  binX the specified x bin number
     *  @param  binY the specified y bin number
     *
     *  @return The energy in the specified bin
     */
    float GetBinEnergy(const int binX, const int binY) const;

    /**
     *  @brief  Get the energy in a specified bin
     *
     *  @param  binX the specified x bin number
     *  @param  binY the specified y bin number
     *
     *  @return The energy in the specified bin
     */
    float GetBinAvailableEnergy(const pandora::Algorithm &algorithm, const int binX, const int binY) const;

    /**
     *  @brief  Get the maximum value in the histogram and the corresponding bin numbers (excludes overflow and underflow bins)
     *
     *  @param  maximumValue to receive the maximum value
     *  @param  maximumBinX to receive the x coordinate of the bin containing the maximum value
     *  @param  maximumBinY to receive the y coordinate of the bin containing the maximum value
     */
    void GetMaximumNCaloHits(unsigned int &maximumValue, int &maximumBinX, int &maximumBinY) const;

    /**
     *  @brief  Get the maximum value in the histogram and the corresponding bin numbers (excludes overflow and underflow bins)
     *
     *  @param  algorithm to access calo hit availability
     *  @param  maximumValue to receive the maximum value
     *  @param  maximumBinX to receive the x coordinate of the bin containing the maximum value
     *  @param  maximumBinY to receive the y coordinate of the bin containing the maximum value
     */
    void GetMaximumNAvailableCaloHits(const pandora::Algorithm &algorithm, unsigned int &maximumValue, int &maximumBinX, int &maximumBinY) const;

    /**
     *  @brief  Get the maximum value in the histogram and the corresponding bin numbers (excludes overflow and underflow bins)
     *
     *  @param  maximumValue to receive the maximum value
     *  @param  maximumBinX to receive the x coordinate of the bin containing the maximum value
     *  @param  maximumBinY to receive the y coordinate of the bin containing the maximum value
     */
    void GetMaximumEnergy(float &maximumValue, int &maximumBinX, int &maximumBinY) const;

    /**
     *  @brief  Get the maximum value in the histogram and the corresponding bin numbers (excludes overflow and underflow bins)
     *
     *  @param  maximumValue to receive the maximum value
     *  @param  maximumBinX to receive the x coordinate of the bin containing the maximum value
     *  @param  maximumBinY to receive the y coordinate of the bin containing the maximum value
     */
    void GetMaximumAvailableEnergy(const pandora::Algorithm &algorithm, float &maximumValue, int &maximumBinX, int &maximumBinY, bool checkBinAvailability = false) const;

    /**
     *  @brief  Set the contents of a specified bin
     *
     *  @param  binX the specified x bin number
     *  @param  binY the specified y bin number
     *  @param  caloHitList the calo hit list for the specified bin
     */
    void SetBinContent(const int binX, const int binY, const pandora::CaloHitList &caloHitList);

    /**
     *  @brief  Add calo hits to the histogram
     *
     *  @param  valueX the x value for the entry
     *  @param  valueY the y value for the entry
     *  @param  caloHitList the calo hit list to add
     */
    void Fill(const float valueX, const float valueY, const pandora::CaloHitList &caloHitList);

    /**
     *  @brief  Add calo hit to the histogram
     *
     *  @param  valueX the x value for the entry
     *  @param  valueY the y value for the entry
     *  @param  pCaloHit the calo hit to add
     */
    void Fill(const float valueX, const float valueY, const pandora::CaloHit *const pCaloHit);

    /**
     *  @brief
     */
    bool GetBinAvailability(const int binX, const int binY) const;

    /**
     *  @brief
     */
    void SetBinAvailability(const int binX, const int binY, bool availability);


private:
    typedef std::map<int, ShowerBin> ShowerBinMap;
    typedef std::map<int, ShowerBinMap> TwoDShowerBinMap;

    TwoDShowerBinMap    m_xyHistogramMap;       ///< The x->y->value 2d histogram map

    int                 m_nBinsX;               ///< The number of x bins
    float               m_xLow;                 ///< The min binned x value
    float               m_xHigh;                ///< The max binned x value
    float               m_xBinWidth;            ///< The x bin width

    int                 m_nBinsY;               ///< The number of y bins
    float               m_yLow;                 ///< The min binned y value
    float               m_yHigh;                ///< The max binned y value
    float               m_yBinWidth;            ///< The y bin width
};

//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

class ShowerPeak
{
public:
    typedef std::pair<int, int> Bin2D;
    typedef std::vector<Bin2D> Bin2DList;

	/**
	 *
	 */
	ShowerPeak(const pandora::CaloHitList &caloHitList, const Bin2DList &binList, const Bin2D &maxBin);

	/**
	 *
	 */
	ShowerPeak(const pandora::CaloHitList &caloHitList, const Bin2D &maxBin);

	/**
	 *
	 */
	const pandora::CaloHitList &GetCaloHitList() const;

	/**
	 *
	 */
	float GetEnergy() const;

	/**
	 *
	 */
	const Bin2DList &GetBinList() const;

	/**
	 *
	 */
	const Bin2D &GetMaxBin() const;

	/**
	 *
	 */
	pandora::StatusCode AddBin(const Bin2D &bin);

	/**
	 *
	 */
	void AddCaloHits(const pandora::CaloHitList &caloHitList);

private:
	pandora::CaloHitList          m_caloHitList;
	float                         m_energy;
	Bin2DList                     m_binList;
	Bin2D                         m_maxBin;
};

typedef std::vector<ShowerPeak> ShowerPeakList;

//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

/** 
 * @brief PhotonReconstructionAlgorithm class
 */ 
class PhotonReconstructionAlgorithm : public pandora::Algorithm
{
	typedef std::map<const pandora::Cluster *, pandora::TrackList> ClusterToTrackListMap;
	typedef std::map<const pandora::CaloHit *, const pandora::Cluster *> CaloHitToClusterMap;

public:
    /**
     *  @brief  Factory class for instantiating algorithm
     */
    class Factory : public pandora::AlgorithmFactory
    {
    public:
        pandora::Algorithm *CreateAlgorithm() const;
    };

private:
    pandora::StatusCode Run();
    pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

private:
    /**
     *
     */
    pandora::StatusCode GetECalCaloHitList(const pandora::CaloHitList *const pCaloHitList, pandora::CaloHitList &allEcalCaloHitList, pandora::CaloHitList &photonEcalCaloHitList);

    /**
     *
     */
    pandora::StatusCode FindShowerPeakCandidates(const Shower2DHistogram &histogram, pandora::ClusterVector &clusterVector, ShowerPeakList &showerPeakList);

    /**
     *
     */
    bool FindInitialShowerPeak(Shower2DHistogram &histogram, ShowerPeakList &showerPeakList, float &maximumPeakEnergy);

    /**
     *
     */
    pandora::StatusCode EnlargePeaks(Shower2DHistogram &histogram, ShowerPeakList &showerPeakList, float currentEnergyStep);

    /**
     *
     */
    pandora::StatusCode EnlargePeak(Shower2DHistogram &histogram, ShowerPeak &showerPeak, float currentEnergyStep);

    /**
     *
     */
    pandora::StatusCode EnlargePeakAroundBin(Shower2DHistogram &histogram, ShowerPeak &showerPeak, const ShowerPeak::Bin2D &bin, float currentEnergyStep);

    /**
     *
     */
    pandora::StatusCode FindNewShowerPeaks(Shower2DHistogram &histogram, ShowerPeakList &showerPeakList, float currentEnergyStep);




    /**
     *
     */
    pandora::StatusCode FillProjectionHistogram(const pandora::CaloHitList &caloHitList, Shower2DHistogram &histogram);

    /**
     *
     */
    void RemoveCaloHitsFromHistogram(const pandora::CaloHitList &caloHitList, Shower2DHistogram &histogram);

    /**
     *
     */
    pandora::StatusCode PerformPhotonPeakLayerClustering(const pandora::CaloHitList &inputCaloHitList, const pandora::CaloHit *const pCaloHit, pandora::CaloHitList &usedCaloHitList) const;

    /**
     *
     */
    pandora::StatusCode RemoveTrackSeededClusters(pandora::ClusterVector &clusterVector);

    /**
     *
     */
    pandora::StatusCode RemoveNearbyTrackCaloHits(pandora::ClusterVector &clusterVector);

    /**
     *
     */
    pandora::StatusCode RemovePhotonsUsingParticleId(pandora::ClusterVector &clusterVector);

    /**
     *
     */
    pandora::StatusCode MergeNearbyCaloHits(const pandora::ClusterVector &clusterVector, const pandora::CaloHitList &inputCaloHitList);

    /**
     *
     */
    pandora::StatusCode RemoveClustersByProperties(pandora::ClusterVector &clusterVector, pandora::CaloHitList &removalCaloHitList);

    /**
     *
     */
    pandora::StatusCode FlagClustersAsPhotons(const pandora::ClusterVector &clusterVector);

private:
    bool                                          m_shouldUseIsolatedHits;
    unsigned int                                  m_maxCaloHitPseudoLayer;
    unsigned int                                  m_projectionNPhiBins;
    unsigned int                                  m_projectionNThetaBins;
    float                                         m_photonPeakMinEnergy;
    float                                         m_photonPeakHitMaxDistance;
    unsigned int                                  m_photonMinNHits;
    float                                         m_photonMaxTrackHitDistance;
    float                                         m_maxTrackClusterDistance;
    float                                         m_photonMaxAngleOrigin;
    float                                         m_photonMaxNearbyHitMergingDistance;
    float                                         m_clusterPropertiesMinTransverseRatio;
    unsigned int                                  m_showerPeakNSteps;
    unsigned int                                  m_showerPeakMinNHits;
};

//------------------------------------------------------------------------------------------------------------------------------------------

inline pandora::Algorithm *PhotonReconstructionAlgorithm::Factory::CreateAlgorithm() const
{
    return new PhotonReconstructionAlgorithm();
}

} 

#endif  //  PHOTONRECONSTRUCTIONALGORITHM_H
