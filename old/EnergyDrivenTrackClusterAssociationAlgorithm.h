  /// \file EnergyDrivenTrackClusterAssociationAlgorithm.h
/*
 *
 * EnergyDrivenTrackClusterAssociationAlgorithm.h header template automatically generated by a class generator
 * Creation date : jeu. avr. 9 2015
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef ENERGYDRIVENTRACKCLUSTERASSOCIATIONALGORITHM_H
#define ENERGYDRIVENTRACKCLUSTERASSOCIATIONALGORITHM_H

#include "Pandora/Algorithm.h"

namespace arbor_content
{

class EnergyEstimateToolBase;

/** 
 * @brief EnergyDrivenTrackClusterAssociationAlgorithm class
 */ 
class EnergyDrivenTrackClusterAssociationAlgorithm : public pandora::Algorithm
{
 public:
	/**
	 *  @brief  Factory class for instantiating algorithm
	 */
	class Factory : public pandora::AlgorithmFactory
	{
	public:
		pandora::Algorithm *CreateAlgorithm() const;
	};

private:

	typedef std::map<float, const pandora::Cluster *> DistanceToClusterMap;

	/**
	 *
	 */
	pandora::StatusCode FindClustersForAssociation(const pandora::Track *const pTrack, const pandora::ClusterVector &clusterVector,
			pandora::ClusterVector &clusterAssociationVector) const;

	/**
	 *
	 */
	pandora::StatusCode RemoveClustersFromList(pandora::ClusterVector &inputClusterVector, const pandora::ClusterVector &clusterAssociationVector) const;

	/**
	 *
	 */
	pandora::StatusCode PerformTrackClusterAssociation(const pandora::Track *const pTrack, const pandora::ClusterVector &clusterAssociationVector,
			pandora::ClusterVector &inputClusterVector) const;

	pandora::StatusCode Run();
	pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

	unsigned int                         m_trackClusterNLayersCut;            ///< The track to cluster N layers difference cut
	float                                 m_trackClusterDistanceCut1;          ///< The track to cluster innermost position difference cut 1
	float                                 m_trackClusterDistanceCut2;          ///< The track to cluster innermost position difference cut 2
	unsigned int                         m_firstInteractingLayerNSeedCut;
	float               	              m_trackClusterProjectionCut;
	float               	              m_chi2SigmaFactor;
	float               	              m_trackClusterChi2Cut;

	EnergyEstimateToolBase              *m_pEnergyEstimateTool;
};

//------------------------------------------------------------------------------------------------------------------------------------------

inline pandora::Algorithm *EnergyDrivenTrackClusterAssociationAlgorithm::Factory::CreateAlgorithm() const
{
    return new EnergyDrivenTrackClusterAssociationAlgorithm();
}

} 

#endif  //  ENERGYDRIVENTRACKCLUSTERASSOCIATIONALGORITHM_H
