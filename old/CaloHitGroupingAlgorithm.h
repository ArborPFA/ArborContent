  /// \file CaloHitGroupingAlgorithm.h
/*
 *
 * CaloHitGroupingAlgorithm.h header template automatically generated by a class generator
 * Creation date : ven. mars 20 2015
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef CALOHITGROUPINGALGORITHM_H
#define CALOHITGROUPINGALGORITHM_H

#include "Pandora/Algorithm.h"

namespace arbor_content
{

/** 
 *  @brief  CaloHitGroupingAlgorithm class
 */ 
class CaloHitGroupingAlgorithm : public pandora::Algorithm 
{
public:
	/**
	 *  @brief  Factory class for instantiating algorithm
	 */
	class Factory : public pandora::AlgorithmFactory
	{
	public:
		pandora::Algorithm *CreateAlgorithm() const;
	};

private:

	typedef std::map<unsigned int, pandora::CaloHitList> OrderedCaloHitList;

	pandora::StatusCode Run();
	pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

	/**
	 *  @brief  Group calo hits within a layer that are close together and that are not embedded
	 *  within a big cluster (size < 5)
	 */
	pandora::StatusCode GroupCaloHitList(const CaloHitGroupingAlgorithm::OrderedCaloHitList *const pOrderedCaloHitList) const;

	/**
	 *  @brief
	 */
	pandora::StatusCode RecursiveCaloHitGrouping(const pandora::CaloHitList *const pLayerCaloHitList,
			pandora::CaloHitList &groupedCaloHitList, pandora::CaloHitList &usedCaloHitList, const pandora::CaloHit *const pLookupCaloHit) const;

	/**
	 *
	 */
	float GetHighestDistanceBetweenCaloHits(const pandora::CaloHitList *const pCaloHitList) const;

	std::string                  m_inputCaloHitListName;
	std::string                  m_backUpCaloHitListName;

	bool                         m_restoreOriginalCaloHitList;
	bool                         m_useECalCaloHits;
	bool                         m_useHcalCaloHits;
};

//------------------------------------------------------------------------------------------------------------------------------------------

inline pandora::Algorithm *CaloHitGroupingAlgorithm::Factory::CreateAlgorithm() const
{
    return new CaloHitGroupingAlgorithm();
}

} 

#endif  //  CALOHITGROUPINGALGORITHM_H
