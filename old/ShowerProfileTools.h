  /// \file ShowerProfileTools.h
/*
 *
 * ShowerProfileTools.h header template automatically generated by a class generator
 * Creation date : mar. mars 15 2016
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef SHOWERPROFILETOOLS_H
#define SHOWERPROFILETOOLS_H

#include "Pandora/AlgorithmTool.h"
#include "Pandora/AlgorithmHeaders.h"

namespace arbor_content
{

/**
 *  @brief  ShowerProfileResult class
 */
class ShowerProfileResult
{
public:
	/**
	 *  @brief Get the shower start pseudo layer
	 */
	unsigned int GetShowerStartLayer() const;

	/**
	 *  @brief  Get the shower opening angle at start point
	 */
	float GetShowerOpeningAngle() const;

	/**
	 *  @brief  Get the mean shower radial rms
	 */
	float GetShowerRadialRms() const;

	/**
	 *  @brief  Get the longitudinal shower length from the starting point
	 */
	float GetShowerLongitudinalLength() const;

	/**
	 *  @brief  Set the shower start pseudo layer
	 *
	 *  @param  startLayer the shower start pseudo layer
	 */
	void SetShowerStartLayer(float startLayer);

	/**
	 *  @brief  Set the shower opening angle at start point
	 *
	 *  @param  openingAngle the shower opening angle
	 */
	void SetShowerOpeningAngle(float openingAngle);

	/**
	 *  @brief  Set the shower radial rms
	 *
	 *  @param  rms the shower radial rms
	 */
	void SetShowerRadialRms(float rms);

	/**
	 *  @brief  Set the longitudinal shower length from start point
	 *
	 *  @param  length the shower length
	 */
	void SetShowerLongitudinalLength(float length);

private:
	pandora::InputUInt               m_showerStartLayer;
	pandora::InputFloat              m_showerOpeningAngle;
	pandora::InputFloat              m_showerRadialRms;
	pandora::InputFloat              m_showerLongitudinalLength;
};

//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

/** 
 *  @brief  ShowerProfileTool class
 */ 
class ShowerProfileTool : public pandora::AlgorithmTool
{
public:
	/**
	 * @brief Destructor
	 */
	virtual ~ShowerProfileTool() {}

	/**
	 *  @brief  Compute the shower profile
	 *
	 *  @param  pCluster the cluster to analyze
	 *  @param  showerProfileResult the result of the shower profile analysis
	 */
	virtual pandora::StatusCode ComputeShowerProfile(const pandora::Cluster *const pCluster, ShowerProfileResult &showerProfileResult) = 0;

	/**
	 *  @brief  Read settings from the xml handle
	 *
	 *  @param  xmlHandle the xml handle to settings
	 */
	virtual pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle) = 0;
};

//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

/**
 *  @brief  SimpleShowerProfileTool class
 */
class SimpleShowerProfileTool : public ShowerProfileTool
{
public:
    /**
     *  @brief  Factory class for instantiating algorithm tool
     */
    class Factory : public pandora::AlgorithmToolFactory
    {
    public:
        pandora::AlgorithmTool *CreateAlgorithmTool() const;
    };

	/**
	 *  @brief  Compute the shower profile
	 *
	 *  @param  pCluster the cluster to analyze
	 *  @param  showerProfileResult the result of the shower profile analysis
	 */
	pandora::StatusCode ComputeShowerProfile(const pandora::Cluster *const pCluster, ShowerProfileResult &showerProfileResult);

	/**
	 *  @brief  Read settings from the xml handle
	 *
	 *  @param  xmlHandle the xml handle to settings
	 */
	pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

private:
	/**
	 *
	 */
	bool IsShowerStartLayer(pandora::OrderedCaloHitList::const_iterator layerIter, const pandora::OrderedCaloHitList &orderedCaloHitList);

	/**
	 *
	 */
	float ComputeShowerOpeningAngle(const pandora::Cluster *const pCluster, unsigned int showerStartLayer);

private:
    unsigned int               m_showerStartNextNLayers;
    unsigned int               m_showerStartNHitsInLayer;
    float                      m_showerStartMaxCentroidDistance;

    float                      m_showerOpeningAngleNextNLayers;
};

//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

inline unsigned int ShowerProfileResult::GetShowerStartLayer() const
{
	return m_showerStartLayer.Get();
}

//------------------------------------------------------------------------------------------------------------------------------------------

inline float ShowerProfileResult::GetShowerOpeningAngle() const
{
	return m_showerOpeningAngle.Get();
}

//------------------------------------------------------------------------------------------------------------------------------------------

inline float ShowerProfileResult::GetShowerRadialRms() const
{
	return m_showerRadialRms.Get();
}

//------------------------------------------------------------------------------------------------------------------------------------------

inline float ShowerProfileResult::GetShowerLongitudinalLength() const
{
	return m_showerLongitudinalLength.Get();
}

//------------------------------------------------------------------------------------------------------------------------------------------

inline void ShowerProfileResult::SetShowerStartLayer(float startLayer)
{
	m_showerStartLayer = startLayer;
}

//------------------------------------------------------------------------------------------------------------------------------------------

inline void ShowerProfileResult::SetShowerOpeningAngle(float openingAngle)
{
	m_showerOpeningAngle = openingAngle;
}

//------------------------------------------------------------------------------------------------------------------------------------------

inline void ShowerProfileResult::SetShowerRadialRms(float rms)
{
	m_showerRadialRms = rms;
}

//------------------------------------------------------------------------------------------------------------------------------------------

inline void ShowerProfileResult::SetShowerLongitudinalLength(float length)
{
	m_showerLongitudinalLength = length;
}

//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

pandora::AlgorithmTool *SimpleShowerProfileTool::Factory::CreateAlgorithmTool() const
{
	return new SimpleShowerProfileTool();
}

} 

#endif  //  SHOWERPROFILETOOLS_H
