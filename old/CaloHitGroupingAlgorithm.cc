  /// \file CaloHitGroupingAlgorithm.cc
/*
 *
 * CaloHitGroupingAlgorithm.cc source template automatically generated by a class generator
 * Creation date : ven. mars 20 2015
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

#include "Pandora/AlgorithmHeaders.h"

#include "ArborUtility/CaloHitGroupingAlgorithm.h"

namespace arbor_content
{

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode CaloHitGroupingAlgorithm::Run()
{
	const pandora::CaloHitList *pCaloHitList = NULL;

	if(!m_inputCaloHitListName.empty())
	{
		PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::ReplaceCurrentList<pandora::CaloHit>(*this, m_inputCaloHitListName));
	}

	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentList(*this, pCaloHitList));

	if (pCaloHitList->empty())
		return pandora::STATUS_CODE_SUCCESS;

	OrderedCaloHitList ecalOrderedCaloHitList;
	OrderedCaloHitList hcalOrderedCaloHitList;

	for(pandora::CaloHitList::const_iterator iter = pCaloHitList->begin(), endIter = pCaloHitList->end() ;
			endIter != iter ; ++iter)
	{
		const pandora::CaloHit *const pCaloHit = *iter;

		if(!PandoraContentApi::IsAvailable(*this, pCaloHit))
			continue;

		if(pandora::ECAL == pCaloHit->GetHitType() && m_useECalCaloHits)
			ecalOrderedCaloHitList[pCaloHit->GetLayer()].insert(pCaloHit);
		else if(pandora::HCAL == pCaloHit->GetHitType() && m_useHcalCaloHits)
			hcalOrderedCaloHitList[pCaloHit->GetLayer()].insert(pCaloHit);
	}

	if(m_useECalCaloHits)
	{
		PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, this->GroupCaloHitList(&ecalOrderedCaloHitList));
	}

	if(m_useHcalCaloHits)
	{
		PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, this->GroupCaloHitList(&hcalOrderedCaloHitList));
	}

	return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode CaloHitGroupingAlgorithm::GroupCaloHitList(const CaloHitGroupingAlgorithm::OrderedCaloHitList *const pOrderedCaloHitList) const
{
	for(OrderedCaloHitList::const_iterator layerIter = pOrderedCaloHitList->begin(), layerEndIter = pOrderedCaloHitList->end() ;
			layerEndIter != layerIter ; ++layerIter)
	{
		pandora::CaloHitList usedCaloHitList;

		for(pandora::CaloHitList::const_iterator iter = layerIter->second.begin(), endIter = layerIter->second.end() ;
				endIter != iter ; ++iter)
		{
			const pandora::CaloHit *const pCaloHit = *iter;
			pandora::CaloHitList groupedCaloHitList;

			if(std::find(usedCaloHitList.begin(), usedCaloHitList.end(), pCaloHit) != usedCaloHitList.end())
				continue;

			usedCaloHitList.insert(pCaloHit);
			groupedCaloHitList.insert(pCaloHit);

			PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, this->RecursiveCaloHitGrouping(&layerIter->second, groupedCaloHitList, usedCaloHitList, pCaloHit));

			if(groupedCaloHitList.size() > 4)
				continue;

			float highestDistance = this->GetHighestDistanceBetweenCaloHits(&groupedCaloHitList);

			if(highestDistance - pCaloHit->GetCellLengthScale() > std::numeric_limits<float>::epsilon())
				continue;


		}
	}

	return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode CaloHitGroupingAlgorithm::RecursiveCaloHitGrouping(const pandora::CaloHitList *const /*pLayerCaloHitList*/,
		pandora::CaloHitList &/*groupedCaloHitList*/, pandora::CaloHitList &/*usedCaloHitList*/, const pandora::CaloHit *const /*pLookupCaloHit*/) const
{
//	for(pandora::CaloHitList::const_iterator iter = pLayerCaloHitList->begin(), endIter = pLayerCaloHitList->end() ;
//			endIter != iter ; ++iter)
//	{
//		const pandora::CaloHit *const pCaloHit = *iter;
//	}


	return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

float CaloHitGroupingAlgorithm::GetHighestDistanceBetweenCaloHits(const pandora::CaloHitList *const pCaloHitList) const
{
	float highestDistance = std::numeric_limits<float>::min();

	for(pandora::CaloHitList::const_iterator iterI = pCaloHitList->begin(), endIterI = pCaloHitList->end() ;
			endIterI != iterI ; ++iterI)
	{
		const pandora::CaloHit *pCaloHitI = *iterI;

		for(pandora::CaloHitList::const_iterator iterJ = pCaloHitList->begin(), endIterJ = pCaloHitList->end() ;
				endIterJ != iterJ ; ++iterJ)
		{
			const pandora::CaloHit *pCaloHitJ = *iterJ;

			if(pCaloHitI == pCaloHitJ)
				continue;

			float distance = (pCaloHitI->GetPositionVector() - pCaloHitJ->GetPositionVector()).GetMagnitude();

			if(distance > highestDistance)
				highestDistance = distance;
		}
	}

	return highestDistance;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode CaloHitGroupingAlgorithm::ReadSettings(const pandora::TiXmlHandle xmlHandle)
{
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
			"InputCaloHitListName", m_inputCaloHitListName));

	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pandora::XmlHelper::ReadValue(xmlHandle,
			"BackUpCaloHitListName", m_backUpCaloHitListName));

	m_restoreOriginalCaloHitList = !m_inputCaloHitListName.empty();
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
			"RestoreOriginalCaloHitList", m_restoreOriginalCaloHitList));

	m_useECalCaloHits = false;
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
			"UseECalCaloHits", m_useECalCaloHits));

	m_useHcalCaloHits = true;
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
			"UseHcalCaloHits", m_useHcalCaloHits));

	if(!m_useECalCaloHits && !m_useHcalCaloHits)
		return pandora::STATUS_CODE_INVALID_PARAMETER;

	return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

} 

