  /// \file OrderParameterAlgorithmTools.h
/*
 *
 * OrderParameterAlgorithmTools.h header template automatically generated by a class generator
 * Creation date : mar. avr. 7 2015
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef ORDERPARAMETERALGORITHMTOOLS_H
#define ORDERPARAMETERALGORITHMTOOLS_H

#include "Pandora/AlgorithmTool.h"

#include "ArborObjects/CaloHit.h"
#include "ArborObjects/Connector.h"

namespace arbor_content
{

/** 
 * @brief OrderParameterAlgorithmToolBase class
 */ 
class OrderParameterToolBase : public pandora::AlgorithmTool
{
public:
	/**
	 *  @brief  Destructor
	 */
	~OrderParameterToolBase();

	/**
	 *  @brief
	 */
	virtual pandora::StatusCode ComputeOrderParameter(const CaloHit *const pCaloHit, const Connector *const pConnector,
			const pandora::CartesianVector &referenceDirection, float &orderParameter) const = 0;
}; 

//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

class KappaOrderParameterTool : public OrderParameterToolBase
{
public:
    /**
     *  @brief  Factory class for instantiating algorithm tool
     */
    class Factory : public pandora::AlgorithmToolFactory
    {
    public:
        pandora::AlgorithmTool *CreateAlgorithmTool() const;
    };

private:

	pandora::StatusCode ComputeOrderParameter(const CaloHit *const pCaloHit, const Connector *const pConnector,
			const pandora::CartesianVector &referenceDirection, float &orderParameter) const;

    /**
     *  @brief  Read the algorithm settings
     *
     *  @param  xmlHandle the relevant xml handle
     */
    pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);


	float                          m_orderParameterAnglePower;
	float                          m_orderParameterDistancePower;
};


//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

inline OrderParameterToolBase::~OrderParameterToolBase()
{
}

//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

inline pandora::AlgorithmTool *KappaOrderParameterTool::Factory::CreateAlgorithmTool() const
{
	return new KappaOrderParameterTool();
}

} 

#endif  //  ORDERPARAMETERALGORITHMTOOLS_H
