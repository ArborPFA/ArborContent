  /// \file BranchingTools.cc
/*
 *
 * BranchingTools.cc source template automatically generated by a class generator
 * Creation date : lun. mai 4 2015
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "ArborTools/BranchingTools.h"
#include "ArborObjects/Branch.h"
#include "ArborApi/ArborContentApi.h"
#include "ArborHelpers/CaloHitHelper.h"
#include "ArborHelpers/SortingHelper.h"

#include "Objects/Cluster.h"
#include "Objects/CaloHit.h"

#include <algorithm>

namespace arbor_content
{

pandora::StatusCode LengthDrivenBranchingTool::CreateBranches(const pandora::Cluster *const pCluster, BranchList &branchList)
{
	BranchList initialBranchList;
	pandora::CaloHitList clusterCaloHitList;
	pandora::CaloHitList leafCaloHitList;
	pCluster->GetOrderedCaloHitList().GetCaloHitList(clusterCaloHitList);

	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, CaloHitHelper::ExtractLeafCaloHitList(&clusterCaloHitList, leafCaloHitList));

	// build initial branches from leaves to up to seed
	for(pandora::CaloHitList::const_iterator iter = leafCaloHitList.begin(), endIter = leafCaloHitList.end() ;
			endIter != iter ; ++iter)
	{
		const CaloHit *const pLeafCaloHit = dynamic_cast<const CaloHit *const>(*iter);

		Branch branch;
		PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, branch.BuildFromCaloHit(pLeafCaloHit));

		initialBranchList.push_back(branch);
	}

	// sort by size
	std::sort(initialBranchList.begin(), initialBranchList.end(), SortingHelper::SortBranchesBySize);

	pandora::CaloHitList usedCaloHitList;

	try
	{
		for(BranchList::const_iterator branchIter = initialBranchList.begin(), branchEndIter = initialBranchList.end() ;
				branchEndIter != branchIter ; ++branchIter)
		{
			// first branch case is the longest one
			if(initialBranchList.begin() == branchIter)
			{
				Branch finalBranch(*branchIter);
				branchList.push_back(finalBranch);

				usedCaloHitList.insert(branchIter->begin(), branchIter->end());
				continue;
			}

			Branch::const_iterator stopBranchIter = branchIter->end()-1;

			for(Branch::const_iterator iter = branchIter->end()-1, endIter = branchIter->begin() ;
					endIter != iter ; --iter)
			{
				if(usedCaloHitList.find(*iter) != usedCaloHitList.end())
				{
					stopBranchIter = iter;
					break;
				}

				usedCaloHitList.insert(*iter);
			}

			Branch finalBranch(stopBranchIter, branchIter->end());
			branchList.push_back(finalBranch);
		}

		std::sort(branchList.begin(), branchList.end(), SortingHelper::SortBranchesBySize);
	}
	catch(const pandora::StatusCodeException &exception)
	{
		branchList.clear();
		return exception.GetStatusCode();
	}

	return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode LengthDrivenBranchingTool::ReadSettings(const pandora::TiXmlHandle /*xmlHandle*/)
{
	/* nop */
	return pandora::STATUS_CODE_SUCCESS;
}

} 

