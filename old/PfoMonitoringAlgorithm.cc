  /// \file PfoMonitoringAlgorithm.cc
/*
 *
 * PfoMonitoringAlgorithm.cc source template automatically generated by a class generator
 * Creation date : lun. juin 20 2016
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "ArborMonitoring/PfoMonitoringAlgorithm.h"

#include "Pandora/AlgorithmHeaders.h"
#include "Pandora/PandoraInternal.h"

#include "ArborObjects/CaloHit.h"
#include "ArborHelpers/GeometryHelper.h"
#include "ArborHelpers/ClusterHelper.h"

namespace arbor_content
{

PfoMonitoringAlgorithm::~PfoMonitoringAlgorithm()
{
	PANDORA_MONITORING_API(SaveTree(this->GetPandora(), "PfoMonitoring", m_monitoringFileName, "RECREATE"));
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode PfoMonitoringAlgorithm::Run()
{
	const pandora::PfoList *pPfoList = NULL;
	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentList(*this, pPfoList));

	pandora::FloatVector centroidXList, centroidYList, centroidZList;
	pandora::FloatVector fitDirectionXList, fitDirectionYList, fitDirectionZList;
	pandora::FloatVector fitCentroidAngleList;
	pandora::FloatVector meanSurroundingEnergyList;
	pandora::FloatVector energyList, mcEnergyList;
	pandora::IntVector chargeList, nTrackList;
	pandora::IntVector pdgList, mcPdgList;
	pandora::IntVector fitSuccessfulList;

	for(pandora::PfoList::const_iterator pfoIter = pPfoList->begin(), pfoEndIter = pPfoList->end() ;
			pfoEndIter != pfoIter ; ++pfoIter)
	{
		const pandora::Pfo *const pPfo(*pfoIter);

		const pandora::ClusterList &clusterList(pPfo->GetClusterList());

		for(pandora::ClusterList::const_iterator clusterIter = clusterList.begin(), clusterEndIter = clusterList.end() ;
				clusterEndIter != clusterIter ; ++clusterIter)
		{
			const pandora::Cluster *const pCluster(*clusterIter);

			if(0 == pCluster->GetNCaloHits())
				continue;

			float energy(0.f), mcEnergy(0.f);
			float centroidX(0.f), centroidY(0.f), centroidZ(0.f);
			float fitDirectionX(0.f), fitDirectionY(0.f), fitDirectionZ(0.f);
			float fitCentroidAngle(0.f);
			int nTracks(0), charge(0);
			int pdg(0), mcPdg(0), fitSuccessful(0);
			float meanSurroundingEnergy(0.f);

			pdg = pCluster->GetParticleIdFlag();

			try
			{
				const pandora::MCParticle *pMCParticle(pandora::MCParticleHelper::GetMainMCParticle(pCluster)->GetPfoTarget());
				mcEnergy = pMCParticle->GetEnergy();
				mcPdg = pMCParticle->GetParticleId();
			}
			catch(pandora::StatusCodeException &)
			{
			}

			const pandora::TrackList &trackList(pCluster->GetAssociatedTrackList());
			nTracks = trackList.size();

			for(pandora::TrackList::const_iterator trackIter = trackList.begin(), trackEndIter = trackList.end() ;
					trackEndIter != trackIter ; ++trackIter)
				charge += (*trackIter)->GetCharge();

			if(this->GetPandora().GetPlugins()->GetParticleId()->IsEmShower(pCluster))
			{
				energy = pCluster->GetCorrectedElectromagneticEnergy(this->GetPandora());
			}
			else
			{
				energy = pCluster->GetCorrectedHadronicEnergy(this->GetPandora());
			}

			pandora::CartesianVector centroid(0.f, 0.f, 0.f);
			PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, ClusterHelper::GetCentroid(pCluster, centroid));

			centroidX = centroid.GetX();
			centroidY = centroid.GetY();
			centroidZ = centroid.GetZ();

			pandora::ClusterFitResult clusterFitResult;

			if(pandora::STATUS_CODE_SUCCESS == pandora::ClusterFitHelper::FitFullCluster(pCluster, clusterFitResult))
			{
				fitSuccessful = clusterFitResult.IsFitSuccessful();

				fitDirectionX = clusterFitResult.GetDirection().GetX();
				fitDirectionY = clusterFitResult.GetDirection().GetY();
				fitDirectionZ = clusterFitResult.GetDirection().GetZ();

				fitCentroidAngle = centroid.GetOpeningAngle(clusterFitResult.GetDirection());
			}

			PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, ClusterHelper::GetMeanSurroundingEnergy(pCluster, meanSurroundingEnergy));

			// fill vectors !
			centroidXList.push_back(centroidX);
			centroidYList.push_back(centroidY);
			centroidZList.push_back(centroidZ);

			fitDirectionXList.push_back(fitDirectionX);
			fitDirectionYList.push_back(fitDirectionY);
			fitDirectionZList.push_back(fitDirectionZ);

			fitCentroidAngleList.push_back(fitCentroidAngle);
			energyList.push_back(energy);
			mcEnergyList.push_back(mcEnergy);

			chargeList.push_back(charge);
			nTrackList.push_back(nTracks);
			pdgList.push_back(pdg);
			mcPdgList.push_back(mcPdg);
			fitSuccessfulList.push_back(fitSuccessful);

			meanSurroundingEnergyList.push_back(meanSurroundingEnergy);
		}
	}

    PANDORA_MONITORING_API(SetTreeVariable(this->GetPandora(), "PfoMonitoring", "centroidX", &centroidXList));
    PANDORA_MONITORING_API(SetTreeVariable(this->GetPandora(), "PfoMonitoring", "centroidY", &centroidYList));
    PANDORA_MONITORING_API(SetTreeVariable(this->GetPandora(), "PfoMonitoring", "centroidZ", &centroidZList));
    PANDORA_MONITORING_API(SetTreeVariable(this->GetPandora(), "PfoMonitoring", "fitDirectionX", &fitDirectionXList));
	PANDORA_MONITORING_API(SetTreeVariable(this->GetPandora(), "PfoMonitoring", "fitDirectionY", &fitDirectionYList));
	PANDORA_MONITORING_API(SetTreeVariable(this->GetPandora(), "PfoMonitoring", "fitDirectionZ", &fitDirectionZList));
	PANDORA_MONITORING_API(SetTreeVariable(this->GetPandora(), "PfoMonitoring", "fitCentroidAngle", &fitCentroidAngleList));
	PANDORA_MONITORING_API(SetTreeVariable(this->GetPandora(), "PfoMonitoring", "energy", &energyList));
	PANDORA_MONITORING_API(SetTreeVariable(this->GetPandora(), "PfoMonitoring", "mcEnergy", &mcEnergyList));
	PANDORA_MONITORING_API(SetTreeVariable(this->GetPandora(), "PfoMonitoring", "charge", &chargeList));
	PANDORA_MONITORING_API(SetTreeVariable(this->GetPandora(), "PfoMonitoring", "nTracks", &nTrackList));
	PANDORA_MONITORING_API(SetTreeVariable(this->GetPandora(), "PfoMonitoring", "pdg", &pdgList));
	PANDORA_MONITORING_API(SetTreeVariable(this->GetPandora(), "PfoMonitoring", "mcPdg", &mcPdgList));
	PANDORA_MONITORING_API(SetTreeVariable(this->GetPandora(), "PfoMonitoring", "fitSuccessful", &fitSuccessfulList));
	PANDORA_MONITORING_API(SetTreeVariable(this->GetPandora(), "PfoMonitoring", "meanSurroundingEnergy", &meanSurroundingEnergyList));

    PANDORA_MONITORING_API(FillTree(this->GetPandora(), "PfoMonitoring"));

	return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode PfoMonitoringAlgorithm::ReadSettings(const pandora::TiXmlHandle xmlHandle)
{
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "MonitoringFileName", m_monitoringFileName));

	return pandora::STATUS_CODE_SUCCESS;
}

} 

