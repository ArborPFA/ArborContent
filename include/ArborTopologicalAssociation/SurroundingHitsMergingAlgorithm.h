  /// \file SurroundingHitsMergingAlgorithm.h
/*
 *
 * SurroundingHitsMergingAlgorithm.h header template automatically generated by a class generator
 * Creation date : jeu. nov. 19 2015
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef SURROUNDINGHITSMERGINGALGORITHM_H
#define SURROUNDINGHITSMERGINGALGORITHM_H

#include "Pandora/Algorithm.h"
#include "Pandora/PandoraInternal.h"

namespace arbor_content
{

/** 
 *  @brief  SurroundingHitsMergingAlgorithm class
 */ 
class SurroundingHitsMergingAlgorithm : public pandora::Algorithm
{
	struct ClusterInfo
	{
		ClusterInfo() :
			m_pCluster(NULL),
			m_clusterEnergy(0.f),
			m_distanceToHit(0.f)
		{
			/* nop */
		}

		const pandora::Cluster     *m_pCluster;
		float                       m_clusterEnergy;
		float                       m_distanceToHit;
	};

	typedef std::vector<ClusterInfo> ClusterInfoVector;

	struct MultiClusterInfo
	{
		MultiClusterInfo() :
			m_totalClusterEnergy(0.f)
		{
			/* nop */
		}

		ClusterInfoVector      m_clusterInfoVector;
		float                 m_totalClusterEnergy;
	};


	typedef std::map<const pandora::CaloHit *, MultiClusterInfo> MultiClusterInfoMap;

public:
	/**
	 *  @brief  Factory class for instantiating algorithm
	 */
	class Factory : public pandora::AlgorithmFactory
	{
	public:
		pandora::Algorithm *CreateAlgorithm() const;
	};

private:
	pandora::StatusCode Run();
	pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

	/**
	 *  @brief  Get the list of available calo hits
	 *
	 *  @param pCaloHitList the input calo hit list to extract available ones
	 *  @param availableCaloHitList the list of available calo hits to receive
	 */
	pandora::StatusCode GetAvailableCaloHitList(const pandora::CaloHitList *const pCaloHitList, pandora::CaloHitList &availableCaloHitList) const;

private:
	float                                    m_maxAssociationDistance;
	float                                    m_distanceWeight;
	float                                    m_energyWeight;
};

//------------------------------------------------------------------------------------------------------------------------------------------

inline pandora::Algorithm *SurroundingHitsMergingAlgorithm::Factory::CreateAlgorithm() const
{
    return new SurroundingHitsMergingAlgorithm();
}

} 

#endif  //  SURROUNDINGHITSMERGINGALGORITHM_H
