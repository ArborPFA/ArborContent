  /// \file GapCrossingConnectionTool.h
/*
 *
 * GapCrossingConnectionTool.h header template automatically generated by a class generator
 * Creation date : mer. dï¿½c. 9 2015
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef GAPCROSSINGCONNECTIONTOOL_H
#define GAPCROSSINGCONNECTIONTOOL_H

#include "ArborTools/ConnectorAlgorithmTool.h"
#include "Pandora/PandoraInternal.h"
#include "Helpers/ClusterFitHelper.h"

namespace arbor_content
{

class CaloHit;
class Connector;

/** 
 *  @brief  GapCrossingConnectionTool class
 */ 
class GapCrossingConnectionTool : public ConnectorAlgorithmTool
{
public:
    /**
     *  @brief  Factory class for instantiating algorithm tool
     */
    class Factory : public pandora::AlgorithmToolFactory
    {
    public:
        pandora::AlgorithmTool *CreateAlgorithmTool() const;
    };

	/**
	 *  @brief  Destructor
	 */
	virtual ~GapCrossingConnectionTool();

	struct GapCrossingInfo
	{
		const arbor_content::CaloHit  *m_pCaloHit;
		pandora::ClusterFitResult      m_fitResult;
	};

	typedef std::map<const pandora::CaloHit *, GapCrossingInfo>  GapCrossingInfoMap;

	/**
	 *  @brief  Process the calo hit list
	 *  @param  algorithm the parent algorithm to access pandora content
	 *
	 *  @param  pCaloHitList the calo hit list to process
	 */
	pandora::StatusCode Process(const pandora::Algorithm &algorithm, const pandora::CaloHitList *const pCaloHitList);

	/**
	 *
	 */
	pandora::StatusCode FindForwardConnectableHits(const pandora::CaloHitList &leafCaloHitList,
			GapCrossingInfoMap &forwardGapCrossingInfoMap) const;

	/**
	 *
	 */
	pandora::StatusCode FindBackwardConnectableHits(const pandora::CaloHitList &seedCaloHitList, GapCrossingInfoMap &backwardGapCrossingInfoMap) const;

	/**
	 *
	 */
	pandora::StatusCode ConnectCrossGapHits(const GapCrossingInfoMap &forwardGapCrossingInfoMap, const GapCrossingInfoMap &backwardGapCrossingInfoMap) const;

	/**
	 *
	 */
	pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

private:
	float                        m_maxDistanceToDetectorXYEdge;
	float                        m_maxDistanceToDetectorZEdge;
	unsigned int                m_maxPseudoLayerToEdge;
	std::string                  m_hcalRingDetectorName;
	unsigned int                m_minHCalClusterSize;
	unsigned int                m_minECalBranchFitLength;
	unsigned int                m_maxHCalClusterFitLayers;
	float                        m_crossGapFitAngleDifferenceCut;
	float                        m_crossGapFitAngleDifferenceCut2;
};

//------------------------------------------------------------------------------------------------------------------------------------------

inline pandora::AlgorithmTool *GapCrossingConnectionTool::Factory::CreateAlgorithmTool() const
{
	return new GapCrossingConnectionTool();
}

//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

inline GapCrossingConnectionTool::~GapCrossingConnectionTool()
{

}

} 

#endif  //  GAPCROSSINGCONNECTIONTOOL_H
