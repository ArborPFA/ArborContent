/*
 *
 * CaloHit.h header template automatically generated by a class generator
 * Creation date : lun. mars 30 2015
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef CALOHIT_H
#define CALOHIT_H

#include "Objects/CaloHit.h"
#include "Api/PandoraApi.h"

#include "ArborApi/ArborApi.h"
#include "ArborApi/ArborInputTypes.h"
#include "ArborObjects/Connector.h"
#include "ArborObjects/ArborMetaData.h"

namespace arbor_content
{

class Connector;
class RectangularCaloHitFactory;
class PointingCaloHitFactory;

/**
 *  @brief  HitTag enumerator
 */
enum HitTag
{
	CORE_HIT,
	ISOLATED_HIT,
	MIP_HIT,
	NOISE_HIT
};

typedef std::map<HitTag, bool> HitTagMap;

/** 
 *  @brief  CaloHit class
 */ 
class CaloHit : public pandora::CaloHit
{
public:
	/**
	 *  @brief  Get the cell size 0 (U if rectangular, eta if pointing calo hit)
	 */
	float GetCellSize0() const;

	/**
	 *  @brief  Get the cell size 1 (V if rectangular, phi if pointing calo hit)
	 */
	float GetCellSize1() const;

    /**
     *  @brief  Get the typical length scale of cell, units mm
     *
     *  @return the typical length scale of cell
     */
    float GetCellLengthScale() const;

    /**
     *  @brief  Get the list of cartesian coordinates for the cell corners
     *
     *  @param  cartesianPointList to receive the cartesian coordinates of the cell corners
     */
    void GetCellCorners(pandora::CartesianPointList &cartesianPointList) const;

    /**
     *  @brief  Get the semi digital threshold
     */
    SemiDigitalThreshold GetSemiDigitalThreshold() const;

	/**
	 *  @brief  Whether the calo hit is connected with this one
	 */
	bool IsConnected(const arbor_content::CaloHit *const pCaloHit) const;

	/**
	 *  @brief  Whether the calo hit (contained in meta data) is connected with this one in the connector direction
	 */
	bool IsConnected(const arbor_content::CaloHit *const pCaloHit, ConnectorDirection direction)  const;

	/**
	 *  @brief  Find a connector.
	 */
	pandora::StatusCode FindConnector(const arbor_content::CaloHit *const pCaloHit, const Connector *&pConnector) const;

	/**
	 *  @brief  Find a connector in a given direction
	 */
	pandora::StatusCode FindConnector(const arbor_content::CaloHit *const pCaloHit, ConnectorDirection direction,
			const Connector *&pConnector) const;

	/**
	 *  @brief  Whether the pandora calo hit has at least one connection
	 */
	bool HasAnyConnection() const;

	/**
	 *  @brief  Get the global connector list (backward and forward)
	 */
	const ConnectorList &GetConnectorList() const;

	/**
	 *  @brief  Get the connector list for a given direction
	 */
	const ConnectorList &GetConnectorList(ConnectorDirection direction) const;

	/**
	 *  @brief  Whether the calo hit is a seed calo hit in the tree.
	 */
	bool IsSeed() const;

	/**
	 *  @brief  Whether the calo hit is a leaf calo hit in the tree
	 */
	bool IsLeaf() const;

	/**
	 *
	 */
	pandora::StatusCode Connect(const CaloHit *const pCaloHit, ConnectorDirection direction,
			float referenceLength = 1.f) const;

	/**
	 *
	 */
	pandora::StatusCode Connect(const CaloHit *const pCaloHit, ConnectorDirection direction,
				const Connector *&pConnector, float referenceLength = 1.f) const;

	/**
	 *
	 */
	pandora::StatusCode RemoveConnection(const CaloHit *const pCaloHit) const;

	/**
	 *
	 */
	pandora::StatusCode RemoveAllConnections() const;

	/**
	 *  @brief  Set the hit tag flag
	 */
	pandora::StatusCode SetTag(HitTag tag, bool value) const;

	/**
	 *  @brief  Get the hit tag flag
	 */
	bool GetTag(HitTag tag) const;

	/**
	 *
	 */
	void ClearTagMap() const;

private:
	/**
	 *  @brief  Constructor
	 */
	CaloHit(const PandoraApi::RectangularCaloHit::Parameters &parameters, const ArborApi::CaloHitParameters &arborParameters);

	/**
	 *  @brief  Constructor
	 */
	CaloHit(const PandoraApi::PointingCaloHit::Parameters &parameters, const ArborApi::CaloHitParameters &arborParameters);

	/**
	 *  @brief  Constructor
	 */
	CaloHit(const CaloHit *const pCaloHit, float weight = 1.f);

	/**
	 *  @brief  Destructor
	 */
	~CaloHit();

protected:

	/**
	 *  @brief  Caculate the cell length scale
	 */
	float CalculateCellLengthScale() const;

	/**
	 *
	 */
	CaloHit *Modifiable(const CaloHit *const pCaloHit) const;

	/**
	 *
	 */
	Connector *Modifiable(const Connector *const pConnector) const;

    const float                            m_cellSize0;
    const float                            m_cellSize1;
    const float                            m_cellLengthScale;
    const SemiDigitalThreshold              m_semiDigitalThreshold;

    CaloHitMetaData                         m_caloHitMetaData;
    HitTagMap                               m_hitTagMap;

    friend class PointingCaloHitFactory;
    friend class RectangularCaloHitFactory;
};

//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

inline float CaloHit::GetCellSize0() const
{
	return m_cellSize0;
}

//------------------------------------------------------------------------------------------------------------------------------------------

inline float CaloHit::GetCellSize1() const
{
	return m_cellSize1;
}

//------------------------------------------------------------------------------------------------------------------------------------------

inline float CaloHit::GetCellLengthScale() const
{
	return m_cellLengthScale;
}

//------------------------------------------------------------------------------------------------------------------------------------------

inline SemiDigitalThreshold CaloHit::GetSemiDigitalThreshold() const
{
	return m_semiDigitalThreshold;
}

} 

#endif  //  CALOHIT_H
