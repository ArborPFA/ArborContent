/// \file EnergyCorrectionPlugin.h
/*
 *
 * EnergyCorrectionPlugin.h header template automatically generated by a class generator
 * Creation date : mar. nov. 17 2015
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef ENERGYCORRECTIONPLUGIN_H
#define ENERGYCORRECTIONPLUGIN_H

#include "Plugins/EnergyCorrectionsPlugin.h"

namespace arbor_content
{

  /**
   *  @brief  AnalogicEnergyFunction
   */
  class AnalogicEnergyFunction : public pandora::EnergyCorrectionPlugin
  {
  public:
    /**
     *  @brief  Default constructor
     */
    AnalogicEnergyFunction();

    /**
     *  @brief  Make energy correction on this given cluster
     *
     *  @param  pCluster the cluster address to correct the energy
     *  @param  correctedEnergy the energy to correct
     */
    pandora::StatusCode MakeEnergyCorrections(const pandora::Cluster *const pCluster, float &correctedEnergy) const;

    /**
     *  @brief  Read settings from the xml handle
     *
     *  @param  xmlHandle the xml handle to read settings from
     */
    pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

  private:
    unsigned int                   m_ecalEnergyType;
    unsigned int                   m_hcalEnergyType;
    unsigned int                   m_muonEnergyType;
    unsigned int                   m_otherEnergyType;
  };

  //------------------------------------------------------------------------------------------------------------------------------------------
  //------------------------------------------------------------------------------------------------------------------------------------------

  /**
   *  @brief  SdhcalQuadraticEnergyFunction class
   */
  class SdhcalQuadraticEnergyFunction : public pandora::EnergyCorrectionPlugin
  {
  public:
    /**
     *  @brief  Default constructor
     */
    SdhcalQuadraticEnergyFunction();

    /**
     *  @brief  Make energy correction on this given cluster
     *
     *  @param  pCluster the cluster address to correct the energy
     *  @param  correctedEnergy the energy to correct
     */
    pandora::StatusCode MakeEnergyCorrections(const pandora::Cluster *const pCluster, float &correctedEnergy) const;

    /**
     *  @brief  Read settings from the xml handle
     *
     *  @param  xmlHandle the xml handle to read settings from
     */
    pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

  private:

    pandora::FloatVector                m_sdhcalThresholds;             ///< The sdhcal threshold values
    pandora::FloatVector                m_energyConstantParameters;    ///< The energy constant parameters
  };

  //------------------------------------------------------------------------------------------------------------------------------------------
  //------------------------------------------------------------------------------------------------------------------------------------------

  /**
   *  @brief  BarrelGapEnergyFunction class
   */
  class BarrelGapEnergyFunction : public pandora::EnergyCorrectionPlugin
  {
  public:
    /**
     *  @brief  Default constructor
     */
    BarrelGapEnergyFunction();

    /**
     *  @brief  Make energy correction on this given cluster
     *
     *  @param  pCluster the cluster address to correct the energy
     *  @param  correctedEnergy the energy to correct
     */
    pandora::StatusCode MakeEnergyCorrections(const pandora::Cluster *const pCluster, float &correctedEnergy) const;

    /**
     *  @brief  Read settings from the xml handle
     *
     *  @param  xmlHandle the xml handle to read settings from
     */
    pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

  private:
    /**
     *  @brief  Approach enum
     */
    enum Approach
    {
      INNER_GAP_APPROACH = -1,
      FAR_FROM_GAP = 0,
      OUTER_GAP_APPROACH = 1
    };

    /**
     *  @brief  Get the calo hit approach to barrel module gap
     */
    Approach GetApproach(const pandora::CaloHit *const pCaloHit) const;

  private:
    pandora::FloatVector                m_ecalZGapPositions;
    pandora::FloatVector                m_hcalZGapPositions;
    float                               m_ecalDistanceToGap;
    float                               m_hcalDistanceToGap;
    float                               m_ecalInnerGapApproachFactor;
    float                               m_ecalOuterGapApproachFactor;
    float                               m_hcalInnerGapApproachFactor;
    float                               m_hcalOuterGapApproachFactor;
  };

  //------------------------------------------------------------------------------------------------------------------------------------------
  //------------------------------------------------------------------------------------------------------------------------------------------

  /**
   *  @brief  ThetaEnergyFunction class
   */
  class ThetaEnergyFunction : public pandora::EnergyCorrectionPlugin
  {
  public:
    /**
     *  @brief  Default constructor
     */
    ThetaEnergyFunction();

    /**
     *  @brief  Make energy correction on this given cluster
     *
     *  @param  pCluster the cluster address to correct the energy
     *  @param  correctedEnergy the energy to correct
     */
    pandora::StatusCode MakeEnergyCorrections(const pandora::Cluster *const pCluster, float &correctedEnergy) const;

    /**
     *  @brief  Read settings from the xml handle
     *
     *  @param  xmlHandle the xml handle to read settings from
     */
    pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

  private:
    /**
     *  @brief  Get the calo hit approach to barrel module gap
     */
    float GetCosTheta(const pandora::Cluster *const pCluster) const;

  private:
    float                       m_barrelEndcapSeparationCosTheta;
    float                       m_barrelInterceptP0;
    float                       m_barrelInterceptP1;
    float                       m_barrelSlopeP0;
    float                       m_barrelSlopeP1;
    float                       m_endcapInterceptP0;
    float                       m_endcapInterceptP1;
    float                       m_endcapSlopeP0;
    float                       m_endcapSlopeP1;
    float                       m_lowEnergyCut;

  };

} 

#endif  //  ENERGYCORRECTIONPLUGIN_H
