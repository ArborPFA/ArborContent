/*
 *
 * ConnectorSeedingAlgorithm.h header template automatically generated by a class generator
 * Creation date : jeu. avr. 2 2015
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef CONNECTORSEEDINGALGORITHM_H
#define CONNECTORSEEDINGALGORITHM_H

#include "Pandora/Algorithm.h"
#include "Pandora/AlgorithmHeaders.h"

namespace arbor_content
{

/** 
 *  @brief  ConnectorSeedingAlgorithm class
 */ 
class ConnectorSeedingAlgorithm : public pandora::Algorithm 
{
public:
	/**
	 *  @brief  Factory class for instantiating algorithm
	 */
	class Factory : public pandora::AlgorithmFactory
	{
	public:
		pandora::Algorithm *CreateAlgorithm() const;
	};

private:

	pandora::StatusCode Run();
	pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

	/**
	 *  @brief  Connect all calo hits layer by layer
	 *
	 *  @param  orderedCaloHitList the ordered calo hit list to connect layer by layer
	 */
	pandora::StatusCode Connect(const pandora::OrderedCaloHitList &orderedCaloHitList) const;

	/**
	 *
	 */
	pandora::StatusCode AlignConnectors(const pandora::OrderedCaloHitList &orderedCaloHitList) const;

	/**
	 *
	 */
	pandora::StatusCode ConnectFromTracks(const pandora::OrderedCaloHitList &orderedCaloHitList, const pandora::TrackList &trackList) const;

	/**
	 */
	pandora::StatusCode FindSeedHits(const pandora::Track *const pTrack, const pandora::OrderedCaloHitList &orderedCaloHitList, pandora::CaloHitList &seedCaloHits) const;

	/**
	 *
	 */
	pandora::StatusCode ConnectRecursively(const pandora::CaloHit *const pCaloHit, const pandora::Helix *const pHelix, const pandora::OrderedCaloHitList &orderedCaloHitList,
			const pandora::OrderedCaloHitList::const_iterator &currentIterator, pandora::CaloHitList &connectedCaloHitList) const;

	float                       m_maxConnectionDistanceFine;
	float                       m_maxConnectionDistanceCoarse;
	float                       m_maxConnectionAngleFine;
	float                       m_maxConnectionAngleCoarse;

	unsigned int               m_maxPseudoLayerConnection;
	unsigned int               m_seedingStrategy;

	bool                        m_shouldConnectOnlySameHitType;

	float                       m_maxNormaleAngleFine;
	float                       m_maxNormaleAngleCoarse;
	float                       m_maxTransverseAngleFine;
	float                       m_maxTransverseAngleCoarse;
	float                       m_maxNormaleDistanceFine;
	float                       m_maxNormaleDistanceCoarse;
	float                       m_maxTransverseDistanceFine;
	float                       m_maxTransverseDistanceCoarse;
};

//------------------------------------------------------------------------------------------------------------------------------------------

inline pandora::Algorithm *ConnectorSeedingAlgorithm::Factory::CreateAlgorithm() const
{
    return new ConnectorSeedingAlgorithm();
}

} 

#endif  //  CONNECTORSEEDINGALGORITHM_H
