  /// \file ArborApi.h
/*
 *
 * ArborApi.h header template automatically generated by a class generator
 * Creation date : lun. mars 30 2015
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef ARBORAPI_H
#define ARBORAPI_H

#include "Api/PandoraApi.h"

#include "ArborApi/ArborInputTypes.h"
#include "Pandora/ObjectFactory.h"

namespace arbor_content
{

/** 
 * @brief ArborApi class
 */ 
class ArborApi 
{
public:
	/**
	 *
	 */
	class CaloHitParameters
	{
	public:
		InputSemiDigitalThreshold             m_semiDigitalThreshold;
	};
};

//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

/**
 *
 */
class RectangularCaloHitFactory : public pandora::ObjectFactory<pandora::CaloHit, PandoraApi::RectangularCaloHit::Parameters>
{
	/**
	 *  @brief  Constructor
	 *
	 *  @param  parameters the additional parameters to pass to the arbor calo hit
	 */
	RectangularCaloHitFactory(const ArborApi::CaloHitParameters &parameters);

	/**
	 *  @brief  Create an arbor calo hit from the rectangular calo hit parameters
	 */
	pandora::StatusCode Create(const pandora::CaloHit *&pObject, const PandoraApi::RectangularCaloHit::Parameters &parameters) const;

private:

	const ArborApi::CaloHitParameters      m_parameters;
};

//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

/**
 *
 */
class PointingCaloHitFactory : public pandora::ObjectFactory<pandora::CaloHit, PandoraApi::PointingCaloHit::Parameters>
{
	/**
	 *  @brief  Constructor
	 *
	 *  @param  parameters the additional parameters to pass to the arbor calo hit
	 */
	PointingCaloHitFactory(const ArborApi::CaloHitParameters &parameters);

	/**
	 *  @brief  Create an arbor calo hit from the pointing calo hit parameters
	 */
	pandora::StatusCode Create(const pandora::CaloHit *&pObject, const PandoraApi::PointingCaloHit::Parameters &parameters) const;

private:

	const ArborApi::CaloHitParameters      m_parameters;
};

} 

#endif  //  ARBORAPI_H
