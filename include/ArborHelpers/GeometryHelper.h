/*
 *
 * GeometryHelper.h header template automatically generated by a class generator
 * Creation date : jeu. avr. 9 2015
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef GEOMETRYHELPER_H
#define GEOMETRYHELPER_H

#include "Pandora/PandoraInternal.h"
#include "Pandora/StatusCodes.h"
#include "Objects/CartesianVector.h"

namespace arbor_content
{

/** 
 *  @brief  GeometryHelper class
 */ 
class GeometryHelper 
{
public:
	 /**
	  *  @brief  Get the closest distance between the two lines
	  *
	  *  @param  point1 on the line 1
	  *  @param  direction1 of the line1
	  *  @param  point2 on the line 2
	  *  @param  direction2 of the line 2
	  *  @param  the closest distance to receive
	  */
	 static pandora::StatusCode GetClosestDistanceBetweenLines(const pandora::CartesianVector &point1, const pandora::CartesianVector &direction1,
	 		const pandora::CartesianVector &point2, const pandora::CartesianVector &direction2, float &distance);

	 /**
	  *  @brief  Get the closest distance between a point and a line
	  *
	  *  @param  point1 on the line
	  *  @param  direction1 of the line
	  *  @param  point2 in the space
	  *  @param  the closest distance between the point and the line to receive
	  */
	 static pandora::StatusCode GetClosestDistanceToLine(const pandora::CartesianVector &point1, const pandora::CartesianVector &direction1,
	 		const pandora::CartesianVector &point2, float &impactParameter);

	 /**
	  *  @brief  Get the projection of a point on the line.
	  *
	  *  @param  linePoint on the line
	  *  @param  direction1 of the line
	  *  @param  point in the space
	  *  @param  projection the projection vector on the line to receive
	  */
	 static pandora::StatusCode GetProjectionOnLine(const pandora::CartesianVector &linePoint, const pandora::CartesianVector &direction,
	 		const pandora::CartesianVector &point, pandora::CartesianVector &projection);

	 /**
	  *  @brief  Get the two crossing points of two lines at the closest distance approach
	  *
	  *  @param  point1 on the line 1
	  *  @param  direction1 of the line 1
	  *  @param  point2 on the line 2
	  *  @param  direction2 of the line 2
	  *  @param  crossingPoint1 the crossing point on the line 1 to receive
	  *  @param  crossingPoint2 the crossing point on the line 2 to receive
	  */
	 static pandora::StatusCode GetCrossingPointsBetweenLines(const pandora::CartesianVector &point1, const pandora::CartesianVector &direction1,
	 		const pandora::CartesianVector &point2, const pandora::CartesianVector &direction2,
	 		pandora::CartesianVector &crossingPoint1, pandora::CartesianVector &crossingPoint2);

}; 

} 

#endif  //  GEOMETRYHELPER_H
