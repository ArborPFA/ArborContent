  /// \file EnergyEstimateTools.h
/*
 *
 * EnergyEstimateTools.h header template automatically generated by a class generator
 * Creation date : ven. avr. 10 2015
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef ENERGYESTIMATETOOLS_H
#define ENERGYESTIMATETOOLS_H

#include "Pandora/AlgorithmTool.h"

namespace arbor_content
{

/**
 * @brief EnergyEstimateToolBase class
 */ 
class EnergyEstimateToolBase : public pandora::AlgorithmTool
{
public:
	/**
	 *  @brief  Destructor
	 */
	virtual ~EnergyEstimateToolBase();

	/**
	 *  @brief  Compute the energy of the cluster
	 *
	 *  @param  pCluster address of the cluster
	 *  @param  energyEstimate the energy estimate to receive
	 */
	virtual pandora::StatusCode ComputeEnergy(const pandora::Cluster *const pCluster, float &energyEstimate) const;

	/**
	 *  @brief  Compute the energy sum of the two clusters which may be non-linear
	 *
	 *  @param  pCluster1 address of the first cluster
	 *  @param  pCluster2 address of the second cluster
	 *  @param  energySumEstimate the energy sum estimate to receive
	 */
	virtual pandora::StatusCode ComputeEnergySum(const pandora::Cluster *const pCluster1, const pandora::Cluster *const pCluster2,
			float &energySumEstimate) const;

	/**
	 *  @brief  Compute the energy of the calo hit list
	 *
	 *  @param  caloHitList the calo hit list on which to perform the energy estimate
	 *  @param  energyEstimate the energy estimate to receive
	 */
	virtual pandora::StatusCode ComputeEnergy(const pandora::CaloHitList &caloHitList, float &energyEstimate) const = 0;

	/**
	 *  @brief  Get the energy resolution at a given energy point
	 *
	 *  @param  energyPoint the energy point
	 *  @param  energyResolution the energy resolution
	 */
	virtual pandora::StatusCode GetEnergyResolution(float energyPoint, float &energyResolution) const = 0;

    /**
     *  @brief  Evaluate the compatibility of a cluster with its associated tracks. Reclustering can be used to split up a
     *          cluster and produce more favourable track/cluster matches.
     *
     *  @param  pCluster address of the cluster
     *  @param  trackList address of the list of tracks associated with the cluster
     *  @param  energyResolutionFactory the number of sigmas of resolution in the chi computation
     *
     *  @return the chi value for the suitability of the track/cluster associations
     */
    virtual float GetTrackClusterCompatibility(const pandora::Cluster *const pCluster,
        const pandora::TrackList &trackList, float energyResolutionFactor = 1.f) const;

    /**
     *  @brief  Evaluate the compatibility of a cluster with its associated tracks. Reclustering can be used to split up a
     *          cluster and produce more favourable track/cluster matches.
     *
     *  @param  clusterEnergy the cluster energy
     *  @param  trackEnergy the sum of the energies of the associated tracks
     *  @param  energyResolutionFactory the number of sigmas of resolution in the chi computation
     *
     *  @return the chi value for the suitability of the track/cluster associations
     */
    virtual float GetTrackClusterCompatibility(const float clusterEnergy, const float trackEnergy,
    		float energyResolutionFactor = 1.f) const;
};

//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

/**
 *  @brief  LinearInputEnergyEstimate class.
 *
 *  Estimate the energy by simply summing linearly the input energy.
 *
 *  E = Sum( inputEnergy )
 *
 */
class LinearInputEnergyEstimate : public EnergyEstimateToolBase
{
public:
    /**
     *  @brief  Factory class for instantiating algorithm tool
     */
    class Factory : public pandora::AlgorithmToolFactory
    {
    public:
        pandora::AlgorithmTool *CreateAlgorithmTool() const;
    };

	pandora::StatusCode ComputeEnergy(const pandora::CaloHitList &caloHitList, float &energyEstimate) const;
	pandora::StatusCode GetEnergyResolution(float energyPoint, float &energyResolution) const;

	pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

private:

	float            m_resolutionEnergyFactor;
	float            m_resolutionConstantFactor;
	float            m_resolutionEnergySquareFactor;
};

//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

/**
 *  @brief  LinearEnergyEstimate class.
 *
 *  Estimate the energy by simply summing linearly the hadronic and electromagnetic energy
 *
 *  E = Sum( E_had + E_em )
 */
class LinearEnergyEstimate : public EnergyEstimateToolBase
{
public:
    /**
     *  @brief  Factory class for instantiating algorithm tool
     */
    class Factory : public pandora::AlgorithmToolFactory
    {
    public:
        pandora::AlgorithmTool *CreateAlgorithmTool() const;
    };

	pandora::StatusCode ComputeEnergy(const pandora::CaloHitList &caloHitList, float &energyEstimate) const;
	pandora::StatusCode GetEnergyResolution(float energyPoint, float &energyResolution) const;

	pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

private:

	float            m_resolutionEnergyFactor;
	float            m_resolutionConstantFactor;
	float            m_resolutionEnergySquareFactor;
};

//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

/**
 *  @brief  CombinedQuadraticEnergyEstimate class.
 *
 *  Estimate the energy by using a quadratic form.
 *  The input energy of hadronc hits is converted to a 3-threshold integer value (1, 2 or 3)
 *
 *  E = E_em_calohit + E_had_calohit
 *
 *  where E_em_calohit is the sum of the electromagnetic and hadronic energy for ECal calo hits only
 *  and E_had_calohit the quadratic energy estimate for semi digital hadron calorimeter hits only :
 *
 *  E_had_calohit = A*N1 + B*N2 + C*N3
 *
 *  with A, B and C quadratic functions of N_hit_had:
 *
 *   A = A1 + A2*N_hit_had + A3*N_hit_had*N_hit_had
 *   B = B1 + B2*N_hit_had + B3*N_hit_had*N_hit_had
 *   C = C1 + C2*N_hit_had + C3*N_hit_had*N_hit_had
 */
class CombinedQuadraticEnergyEstimate : public EnergyEstimateToolBase
{
public:
    /**
     *  @brief  Factory class for instantiating algorithm tool
     */
    class Factory : public pandora::AlgorithmToolFactory
    {
    public:
        pandora::AlgorithmTool *CreateAlgorithmTool() const;
    };

	pandora::StatusCode ComputeEnergy(const pandora::CaloHitList &caloHitList, float &energyEstimate) const;
	pandora::StatusCode GetEnergyResolution(float energyPoint, float &energyResolution) const;

	pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

private:

	pandora::FloatVector       m_energyConstantParameters;
	pandora::FloatVector       m_energyThresholdValues;

	float                     m_resolutionEnergyFactor;
	float                     m_resolutionConstantFactor;
	float                     m_resolutionEnergySquareFactor;
};


//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

inline pandora::AlgorithmTool *LinearInputEnergyEstimate::Factory::CreateAlgorithmTool() const
{
	return new LinearInputEnergyEstimate();
}

//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

inline pandora::AlgorithmTool *LinearEnergyEstimate::Factory::CreateAlgorithmTool() const
{
	return new LinearEnergyEstimate();
}

//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

inline pandora::AlgorithmTool *CombinedQuadraticEnergyEstimate::Factory::CreateAlgorithmTool() const
{
	return new CombinedQuadraticEnergyEstimate();
}

} 

#endif  //  ENERGYESTIMATETOOLS_H
