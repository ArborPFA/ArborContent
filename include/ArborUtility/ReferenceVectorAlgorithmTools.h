  /// \file ReferenceVectorAlgorithmTools.h
/*
 *
 * ReferenceVectorAlgorithmTools.h header template automatically generated by a class generator
 * Creation date : mar. avr. 7 2015
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef REFERENCEVECTORALGORITHMTOOLS_H
#define REFERENCEVECTORALGORITHMTOOLS_H

#include "Pandora/AlgorithmTool.h"

#include "ArborObjects/CaloHit.h"

namespace arbor_content
{

/** 
 * @brief ReferenceVectorAlgorithmTools class
 */ 
class ReferenceVectorToolBase : public pandora::AlgorithmTool
{
public:
	/**
	 *  @brief  Destructor
	 */
	virtual ~ReferenceVectorToolBase();

	/**
	 *
	 */
	virtual pandora::StatusCode ComputeReferenceVector(const CaloHit *const pCaloHit, pandora::CartesianVector &referenceVector) const = 0;
};

//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

class SimpleReferenceVectorTool : public ReferenceVectorToolBase
{
public:
    /**
     *  @brief  Factory class for instantiating algorithm tool
     */
    class Factory : public pandora::AlgorithmToolFactory
    {
    public:
        pandora::AlgorithmTool *CreateAlgorithmTool() const;
    };

	/**
	 *
	 */
	pandora::StatusCode ComputeReferenceVector(const CaloHit *const pCaloHit, pandora::CartesianVector &referenceVector) const;

private:
	/**
	 *
	 */
	 pandora::StatusCode GetMeanDirection(const CaloHit *const pCaloHit, ConnectorDirection connectorDirection,
			 pandora::CartesianVector &direction, float weight, unsigned int depth, unsigned pseudoLayerDifference) const;

    /**
     *  @brief  Read the algorithm settings
     *
     *  @param  xmlHandle the relevant xml handle
     */
    pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

	float                          m_backwardConnectorWeight;
	float                          m_forwardConnectorWeight;
	unsigned int                  m_referenceDirectionDepth;
	unsigned int                  m_referenceDirectionMaximumForwardLayer;
};

//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

inline ReferenceVectorToolBase::~ReferenceVectorToolBase()
{
}

//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

inline pandora::AlgorithmTool *SimpleReferenceVectorTool::Factory::CreateAlgorithmTool() const
{
	return new SimpleReferenceVectorTool();
}


} 

#endif  //  REFERENCEVECTORALGORITHMTOOLS_H
