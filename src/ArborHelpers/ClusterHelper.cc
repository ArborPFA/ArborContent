  /// \file ClusterHelper.cc
/*
 *
 * ClusterHelper.cc source template automatically generated by a class generator
 * Creation date : ven. avr. 10 2015
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

#include "Pandora/AlgorithmHeaders.h"

#include "ArborHelpers/ClusterHelper.h"
#include "ArborHelpers/CaloHitHelper.h"
#include "ArborHelpers/GeometryHelper.h"

namespace arbor_content
{

pandora::StatusCode ClusterHelper::GetCentroid(const pandora::Cluster *const pCluster, pandora::CartesianVector &centroid)
{
	const pandora::OrderedCaloHitList &orderedCaloHitList(pCluster->GetOrderedCaloHitList());

	for(pandora::OrderedCaloHitList::const_iterator iter = orderedCaloHitList.begin(), endIter = orderedCaloHitList.end() ;
			endIter != iter ; ++iter)
	{
		centroid += pCluster->GetCentroid(iter->first);
	}

	centroid *= 1.f/(orderedCaloHitList.size());

	return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ClusterHelper::GetClosestDistanceApproach(const pandora::Cluster *const pCluster, const pandora::CartesianVector &point,
		float &closestDistance)
{
	closestDistance = std::numeric_limits<float>::max();

	if(NULL == pCluster)
		return pandora::STATUS_CODE_INVALID_PARAMETER;

	if(0 == pCluster->GetNCaloHits())
		return pandora::STATUS_CODE_FAILURE;

	pandora::CaloHitList clusterCaloHitList;
	pCluster->GetOrderedCaloHitList().GetCaloHitList(clusterCaloHitList);

	for(pandora::CaloHitList::const_iterator iter = clusterCaloHitList.begin() , endIter = clusterCaloHitList.end() ;
			endIter != iter ; ++iter)
	{
		const pandora::CaloHit *const pCaloHit = *iter;
		const float distance = (pCaloHit->GetPositionVector() - point).GetMagnitude();

		if(closestDistance > distance)
			closestDistance = distance;
	}

	return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ClusterHelper::GetCentroidDistance(const pandora::Cluster *const pCluster, const pandora::CartesianVector &point,
		float &centroidDistance)
{
	centroidDistance = std::numeric_limits<float>::max();

	if(NULL == pCluster)
		return pandora::STATUS_CODE_INVALID_PARAMETER;

	if(0 == pCluster->GetNCaloHits())
		return pandora::STATUS_CODE_FAILURE;

	pandora::CartesianVector clusterCentroid(0.f, 0.f, 0.f);
	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, ClusterHelper::GetCentroid(pCluster, clusterCentroid));

	centroidDistance = (clusterCentroid - point).GetMagnitude();

	return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ClusterHelper::GetClosestDistanceApproach(const pandora::Cluster *const pCluster1, const pandora::Cluster *const pCluster2,
		float &closestDistance)
{
	closestDistance = std::numeric_limits<float>::max();

	if(NULL == pCluster1 || NULL == pCluster2)
		return pandora::STATUS_CODE_INVALID_PARAMETER;

	if(0 == pCluster1->GetNCaloHits() || 0 == pCluster2->GetNCaloHits())
		return pandora::STATUS_CODE_FAILURE;

	pandora::CaloHitList clusterCaloHitList1;
	pCluster1->GetOrderedCaloHitList().GetCaloHitList(clusterCaloHitList1);

	for(pandora::CaloHitList::const_iterator iter = clusterCaloHitList1.begin() , endIter = clusterCaloHitList1.end() ;
			endIter != iter ; ++iter)
	{
		const pandora::CaloHit *const pCaloHit = *iter;
		float closestHitDistanceApproach(std::numeric_limits<float>::max());

		PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, ClusterHelper::GetClosestDistanceApproach(pCluster2,
				pCaloHit->GetPositionVector(), closestHitDistanceApproach));

		if(closestHitDistanceApproach < closestDistance)
			closestDistance = closestHitDistanceApproach;
	}

	return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ClusterHelper::GetNCaloHitSeeds(const pandora::Cluster *const pCluster, unsigned int &nSeeds)
{
	if(NULL == pCluster)
		return pandora::STATUS_CODE_INVALID_PARAMETER;

	pandora::CaloHitList clusterCaloHitList;
	pandora::CaloHitList seedsCaloHitList;

	pCluster->GetOrderedCaloHitList().GetCaloHitList(clusterCaloHitList);

	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, CaloHitHelper::ExtractSeedCaloHitList(&clusterCaloHitList, seedsCaloHitList));

	nSeeds = seedsCaloHitList.size();

	return pandora::STATUS_CODE_SUCCESS;
}


bool ClusterHelper::IsClusterLeavingDetector(const pandora::Pandora &pandora, const pandora::Cluster *const pCluster, unsigned int nOuterLayersToExamine,
		float maxDistanceToDetectorEdge, unsigned int minNHitsNearEdges)
{
	if(NULL == pCluster)
		throw pandora::StatusCodeException(pandora::STATUS_CODE_INVALID_PARAMETER);

	// muons escape detector
	if( abs(pCluster->GetParticleIdFlag()) == 13 || ClusterHelper::ContainsHitType(pCluster, pandora::MUON))
		return true;

	if(pandora::HCAL != pCluster->GetOuterLayerHitType())
		return false;

	const pandora::OrderedCaloHitList &orderedCaloHitList(pCluster->GetOrderedCaloHitList());
	const unsigned int outerPseudoLayer(pCluster->GetOuterPseudoLayer());
	const unsigned int innerPseudoLayer(pCluster->GetInnerPseudoLayer());
	const unsigned int nPseudoLayers(outerPseudoLayer-innerPseudoLayer+1);
	const unsigned int pseudoLayerStart(nPseudoLayers < nOuterLayersToExamine ? innerPseudoLayer : outerPseudoLayer-nOuterLayersToExamine);

	const pandora::GeometryManager *const pGeometry = pandora.GetGeometry();

	const pandora::SubDetector &hcalEndcap(pGeometry->GetSubDetector(pandora::HCAL_ENDCAP));
	const pandora::SubDetector &hcalBarrel(pGeometry->GetSubDetector(pandora::HCAL_BARREL));

	const float hcalEndcapOuterZCoordinate(hcalEndcap.GetOuterZCoordinate());
	const float hcalEndcapOuterRCoordinate(hcalEndcap.GetOuterRCoordinate());
	const float hcalBarrelOuterRCoordinate(hcalBarrel.GetOuterRCoordinate());

	unsigned int nHitsNearbyEdge(0);

	for(unsigned int pl=pseudoLayerStart ; pl<outerPseudoLayer ; ++pl)
	{
		pandora::OrderedCaloHitList::const_iterator iter = orderedCaloHitList.find(pl);

		if(orderedCaloHitList.end() == iter)
			continue;

		for (pandora::CaloHitList::const_iterator hitIter = iter->second->begin(), hitIterEnd = iter->second->end() ;
				hitIter != hitIterEnd; ++hitIter)
		{
			const pandora::CaloHit *const pCaloHit(*hitIter);

			if(pandora::HCAL != pCaloHit->GetHitType())
				continue;

			if(pandora::ENDCAP == pCaloHit->GetHitRegion())
			{
				pandora::CartesianVector outerNormaleVector(0.f, 0.f, 0.f);

				if(pandora::STATUS_CODE_SUCCESS != GeometryHelper::GetOuterNormaleVector(pandora, pandora::HCAL_ENDCAP, (*hitIter)->GetPositionVector(), outerNormaleVector))
					continue;

				const float hitCosAngleNormale(outerNormaleVector.GetCosOpeningAngle(pCaloHit->GetPositionVector()));
				const float hitDistanceToOrigin(pCaloHit->GetPositionVector().GetMagnitude());
				const float hitDistanceToREdge(hcalEndcapOuterRCoordinate - hitDistanceToOrigin*hitCosAngleNormale);
				const float hitDistanceToZEdge(hcalEndcapOuterZCoordinate-fabs(pCaloHit->GetPositionVector().GetZ()));

				if(hitDistanceToREdge < maxDistanceToDetectorEdge)
					++nHitsNearbyEdge;
				else if(hitDistanceToZEdge < maxDistanceToDetectorEdge)
					++nHitsNearbyEdge;
			}
			else if(pandora::BARREL == pCaloHit->GetHitRegion())
			{
				pandora::CartesianVector outerNormaleVector(0.f, 0.f, 0.f);

				if(pandora::STATUS_CODE_SUCCESS != GeometryHelper::GetOuterNormaleVector(pandora, pandora::HCAL_BARREL, (*hitIter)->GetPositionVector(), outerNormaleVector))
					continue;

				const float hitCosAngleNormale(outerNormaleVector.GetCosOpeningAngle(pCaloHit->GetPositionVector()));
				const float hitDistanceToOrigin(pCaloHit->GetPositionVector().GetMagnitude());
				const float hitDistanceToEdge(hcalBarrelOuterRCoordinate - hitDistanceToOrigin*hitCosAngleNormale);

				if(hitDistanceToEdge < maxDistanceToDetectorEdge)
					++nHitsNearbyEdge;
			}
		}
	}

	if(nHitsNearbyEdge >= minNHitsNearEdges)
		return true;

	return false;
}

//------------------------------------------------------------------------------------------------------------------------------------------

bool ClusterHelper::ContainsHitType(const pandora::Cluster *const pCluster, const pandora::HitType hitType)
{
    const pandora::OrderedCaloHitList &orderedCaloHitList(pCluster->GetOrderedCaloHitList());

    for (pandora::OrderedCaloHitList::const_reverse_iterator iter = orderedCaloHitList.rbegin(), iterEnd = orderedCaloHitList.rend(); iter != iterEnd; ++iter)
    {
        for (pandora::CaloHitList::const_iterator hIter = iter->second->begin(), hIterEnd = iter->second->end(); hIter != hIterEnd; ++hIter)
        {
            const pandora::CaloHit *const pCaloHit(*hIter);

            if (hitType == pCaloHit->GetHitType())
                return true;
        }
    }

    return false;
}

} 

