  /// \file ClusterHelper.cc
/*
 *
 * ClusterHelper.cc source template automatically generated by a class generator
 * Creation date : ven. avr. 10 2015
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

#include "Pandora/AlgorithmHeaders.h"

#include "ArborHelpers/ClusterHelper.h"
#include "ArborHelpers/CaloHitHelper.h"

namespace arbor_content
{

pandora::StatusCode ClusterHelper::GetCentroid(const pandora::Cluster *const pCluster, pandora::CartesianVector &centroid)
{
	const pandora::OrderedCaloHitList &orderedCaloHitList(pCluster->GetOrderedCaloHitList());

	for(pandora::OrderedCaloHitList::const_iterator iter = orderedCaloHitList.begin(), endIter = orderedCaloHitList.end() ;
			endIter != iter ; ++iter)
	{
		centroid += pCluster->GetCentroid(iter->first);
	}

	centroid *= 1.f/(orderedCaloHitList.size());

	return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ClusterHelper::GetClosestDistanceApproach(const pandora::Cluster *const pCluster, const pandora::CartesianVector &point,
		float &closestDistance)
{
	closestDistance = std::numeric_limits<float>::max();

	if(NULL == pCluster)
		return pandora::STATUS_CODE_INVALID_PARAMETER;

	if(0 == pCluster->GetNCaloHits())
		return pandora::STATUS_CODE_FAILURE;

	pandora::CaloHitList clusterCaloHitList;
	pCluster->GetOrderedCaloHitList().GetCaloHitList(clusterCaloHitList);

	for(pandora::CaloHitList::const_iterator iter = clusterCaloHitList.begin() , endIter = clusterCaloHitList.end() ;
			endIter != iter ; ++iter)
	{
		const pandora::CaloHit *const pCaloHit = *iter;
		const float distance = (pCaloHit->GetPositionVector() - point).GetMagnitude();

		if(closestDistance > distance)
			closestDistance = distance;
	}

	return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ClusterHelper::GetNCaloHitSeeds(const pandora::Cluster *const pCluster, unsigned int &nSeeds)
{
	if(NULL == pCluster)
		return pandora::STATUS_CODE_INVALID_PARAMETER;

	pandora::CaloHitList clusterCaloHitList;
	pandora::CaloHitList seedsCaloHitList;

	pCluster->GetOrderedCaloHitList().GetCaloHitList(clusterCaloHitList);

	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, CaloHitHelper::ExtractSeedCaloHitList(&clusterCaloHitList, seedsCaloHitList));

	nSeeds = seedsCaloHitList.size();

	return pandora::STATUS_CODE_SUCCESS;
}

} 

