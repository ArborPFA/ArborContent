/*
 *
 * GeometryHelper.cc source template automatically generated by a class generator
 * Creation date : jeu. avr. 9 2015
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "ArborHelpers/GeometryHelper.h"

namespace arbor_content
{

pandora::StatusCode GeometryHelper::GetClosestDistanceBetweenLines(const pandora::CartesianVector &point1, const pandora::CartesianVector &direction1,
		const pandora::CartesianVector &point2, const pandora::CartesianVector &direction2, float &distance)
{
	distance = 0.f;

	try
	{
		const pandora::CartesianVector unitDirection1 = direction1.GetUnitVector();
		const pandora::CartesianVector unitDirection2 = direction2.GetUnitVector();
		const pandora::CartesianVector w0 = point1 - point2;
		const float b = unitDirection1.GetCosOpeningAngle(unitDirection2);
		const float d = unitDirection1.GetDotProduct(w0);
		const float e = unitDirection2.GetDotProduct(w0);
		const float denom = 1 - b*b;

		// parallel lines
		if(unitDirection1 == unitDirection2)
		{
			// compute the distance from point2 to line1
			return GeometryHelper::GetClosestDistanceToLine(point1, unitDirection1, point2, distance);
		}
		else
		{
			// compute the real impact parameter between the two lines
			const pandora::CartesianVector impactParameterVector = w0 + ( unitDirection1*((b*e - d)/denom) - unitDirection2*((e - b*d)/denom) );
			distance = impactParameterVector.GetMagnitude();
		}
	}
	catch(pandora::StatusCodeException &statusCodeException)
	{
		return statusCodeException.GetStatusCode();
	}

	return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode GeometryHelper::GetClosestDistanceToLine(const pandora::CartesianVector &point1, const pandora::CartesianVector &direction1,
		const pandora::CartesianVector &point2, float &distance)
{
	try
	{
		// compute the distance from point2 to line1
		const pandora::CartesianVector unitDirection1 = direction1.GetUnitVector();
		float k = unitDirection1.GetDotProduct(point2-point1);
		const pandora::CartesianVector normale = point1 + unitDirection1*k - point2;
		distance = normale.GetMagnitude();
	}
	catch(pandora::StatusCodeException &statusCodeException)
	{
		return statusCodeException.GetStatusCode();
	}

	return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode GeometryHelper::GetProjectionOnLine(const pandora::CartesianVector &linePoint, const pandora::CartesianVector &direction,
		const pandora::CartesianVector &point, pandora::CartesianVector &projection)
{
	try
	{
		projection = linePoint + direction.GetUnitVector() * ((point-linePoint).GetMagnitude() * direction.GetCosOpeningAngle(point-linePoint));
	}
	catch(pandora::StatusCodeException &statusCodeException)
	{
		return statusCodeException.GetStatusCode();
	}

	return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode GeometryHelper::GetCrossingPointsBetweenLines(const pandora::CartesianVector &point1, const pandora::CartesianVector &direction1,
		const pandora::CartesianVector &point2, const pandora::CartesianVector &direction2,
		pandora::CartesianVector &crossingPoint1, pandora::CartesianVector &crossingPoint2)
{
	try
	{
		// parallel lines never cross
		if(direction1.GetUnitVector() == direction2.GetUnitVector())
			return pandora::STATUS_CODE_INVALID_PARAMETER;

		const pandora::CartesianVector unitDirection1 = direction1.GetUnitVector();
		const pandora::CartesianVector unitDirection2 = direction2.GetUnitVector();
		const pandora::CartesianVector w0 = point1 - point2;
		const float b = unitDirection1.GetCosOpeningAngle(unitDirection2);
		const float d = unitDirection1.GetDotProduct(w0);
		const float e = unitDirection2.GetDotProduct(w0);
		const float denom = 1 - b*b;

		crossingPoint1 = point1 + unitDirection1*(b*e-d)*(1.f/denom);
		crossingPoint2 = point2 + unitDirection2*(e - b*d)*(1.f/denom);
	}
	catch(pandora::StatusCodeException &statusCodeException)
	{
		return statusCodeException.GetStatusCode();
	}

	return pandora::STATUS_CODE_SUCCESS;
}


} 

