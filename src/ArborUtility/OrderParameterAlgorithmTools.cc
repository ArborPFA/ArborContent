  /// \file OrderParameterAlgorithmTools.cc
/*
 *
 * OrderParameterAlgorithmTools.cc source template automatically generated by a class generator
 * Creation date : mar. avr. 7 2015
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "ArborUtility/OrderParameterAlgorithmTools.h"
#include "ArborObjects/CaloHit.h"
#include "ArborObjects/Connector.h"

#include "Pandora/AlgorithmHeaders.h"

namespace arbor_content
{

pandora::StatusCode KappaOrderParameterTool::ComputeOrderParameter(const CaloHit *const pCaloHit, const Connector *const pConnector,
		const pandora::CartesianVector &referenceDirection, float &orderParameter) const
{
	orderParameter = std::numeric_limits<float>::max();

	if(!pConnector->IsFrom(pCaloHit) && !pConnector->IsTo(pCaloHit))
		return pandora::STATUS_CODE_INVALID_PARAMETER;

	ConnectorDirection direction = pConnector->IsFrom(pCaloHit) ? FORWARD_DIRECTION : BACKWARD_DIRECTION;
	const pandora::CartesianVector connectorVector = pConnector->GetVector(direction);
	const float angle = referenceDirection.GetOpeningAngle(connectorVector)/M_PI;
	const float distance = pConnector->GetNormalizedLength();

	orderParameter = std::pow(angle, m_orderParameterAnglePower) * std::pow(distance, m_orderParameterDistancePower);

	return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode KappaOrderParameterTool::ReadSettings(const pandora::TiXmlHandle xmlHandle)
{
	m_orderParameterAnglePower = 1.f;
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
			"OrderParameterAnglePower", m_orderParameterAnglePower));

	m_orderParameterDistancePower = 5.f;
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
			"OrderParameterDistancePower", m_orderParameterDistancePower));

	return pandora::STATUS_CODE_SUCCESS;
}

} 

