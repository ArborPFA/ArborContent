  /// \file ListChangingAlgorithm.cc
/*
 *
 * ListChangingAlgorithm.cc source template automatically generated by a class generator
 * Creation date : sam. mars 21 2015
 *
 * This file is part of ArborContent libraries.
 *
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author John Marshall
 */

#include "Pandora/AlgorithmHeaders.h"

#include "ArborUtility/ListChangingAlgorithm.h"

using namespace pandora;

namespace arbor_content
{

StatusCode ListChangingAlgorithm::Run()
{
    if (!m_caloHitListName.empty())
    {
        const StatusCode statusCode(PandoraContentApi::ReplaceCurrentList<CaloHit>(*this, m_caloHitListName));

        if ((STATUS_CODE_SUCCESS != statusCode) && (STATUS_CODE_NOT_FOUND != statusCode))
            return statusCode;

        if (STATUS_CODE_NOT_FOUND == statusCode)
            std::cout << "ListChangingAlgorithm: calohit list not found " << m_caloHitListName << std::endl;
    }

    if (!m_clusterListName.empty())
    {
        const StatusCode statusCode(PandoraContentApi::ReplaceCurrentList<Cluster>(*this, m_clusterListName));

        if ((STATUS_CODE_SUCCESS != statusCode) && (STATUS_CODE_NOT_FOUND != statusCode))
            return statusCode;

        if (STATUS_CODE_NOT_FOUND == statusCode)
            std::cout << "ListChangingAlgorithm: cluster list not found " << m_clusterListName << std::endl;
    }

    if (!m_vertexListName.empty())
    {
        const StatusCode statusCode(PandoraContentApi::ReplaceCurrentList<Vertex>(*this, m_vertexListName));

        if ((STATUS_CODE_SUCCESS != statusCode) && (STATUS_CODE_NOT_FOUND != statusCode))
            return statusCode;

        if (STATUS_CODE_NOT_FOUND == statusCode)
            std::cout << "ListChangingAlgorithm: vertex list not found " << m_vertexListName << std::endl;
    }

    if (!m_pfoListName.empty())
    {
        const StatusCode statusCode(PandoraContentApi::ReplaceCurrentList<Pfo>(*this, m_pfoListName));

        if ((STATUS_CODE_SUCCESS != statusCode) && (STATUS_CODE_NOT_FOUND != statusCode))
            return statusCode;

        if (STATUS_CODE_NOT_FOUND == statusCode)
            std::cout << "ListChangingAlgorithm: pfo list not found " << m_pfoListName << std::endl;
    }

    return STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

StatusCode ListChangingAlgorithm::ReadSettings(const TiXmlHandle xmlHandle)
{
    PANDORA_RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, XmlHelper::ReadValue(xmlHandle, "CaloHitListName", m_caloHitListName));
    PANDORA_RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, XmlHelper::ReadValue(xmlHandle, "ClusterListName", m_clusterListName));
    PANDORA_RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, XmlHelper::ReadValue(xmlHandle, "VertexListName", m_vertexListName));
    PANDORA_RETURN_RESULT_IF_AND_IF(STATUS_CODE_SUCCESS, STATUS_CODE_NOT_FOUND, !=, XmlHelper::ReadValue(xmlHandle, "PfoListName", m_pfoListName));

    return STATUS_CODE_SUCCESS;
}

}
