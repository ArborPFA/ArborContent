  /// \file SplitClusterTool.cc
/*
 *
 * SplitClusterTool.cc source template automatically generated by a class generator
 * Creation date : mar. avr. 7 2015
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "ArborUtility/SplitClusterTool.h"

#include "Pandora/AlgorithmHeaders.h"

#include "ArborHelpers/CaloHitHelper.h"

namespace arbor_content
{

pandora::StatusCode SplitClusterTool::SplitCluster(const pandora::Algorithm &parentAlgorithm, const pandora::Cluster *const pCluster,
		const Connector *const pConnector, const pandora::Cluster *&pClusterFragment) const
{
	if(NULL == pCluster)
		return pandora::STATUS_CODE_FAILURE;

	// check first if the two connected calo hits belongs to the cluster
	const CaloHit *const pFromCaloHit = pConnector->GetFrom();
	const CaloHit *const pToCaloHit = pConnector->GetTo();

	pandora::CaloHitList clusterCaloHitList;
	pCluster->GetOrderedCaloHitList().GetCaloHitList(clusterCaloHitList);

	if(clusterCaloHitList.end() == clusterCaloHitList.find(pFromCaloHit) || clusterCaloHitList.end() == clusterCaloHitList.find(pToCaloHit))
		return pandora::STATUS_CODE_NOT_FOUND;

	// build the cluster fragment calo hit list
	pandora::CaloHitList fragmentCaloHitList;
	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, CaloHitHelper::BuildCaloHitList(pToCaloHit, FORWARD_DIRECTION, fragmentCaloHitList));

	// remove these hits from the cluster
	for(pandora::CaloHitList::const_iterator iter = fragmentCaloHitList.begin(), endIter = fragmentCaloHitList.end() ;
			endIter != iter ; ++iter)
	{
		const pandora::CaloHit *const pClusterCaloHit = *iter;
		PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::RemoveFromCluster(parentAlgorithm, pCluster, pClusterCaloHit));
	}

	// remove the connection
	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pFromCaloHit->RemoveConnection(pToCaloHit));

	// build the cluster fragment
	pClusterFragment = NULL;
	PandoraContentApi::ClusterParameters clusterParameters;
	clusterParameters.m_caloHitList = fragmentCaloHitList;

	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::Cluster::Create(parentAlgorithm, clusterParameters, pClusterFragment));

	return pandora::STATUS_CODE_SUCCESS;
}

} 

