  /// \file TopologicalTrackClusterAssociationAlgorithm.cc
/*
 *
 * TopologicalTrackClusterAssociationAlgorithm.cc source template automatically generated by a class generator
 * Creation date : jeu. avr. 9 2015
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

#include "Pandora/AlgorithmHeaders.h"

#include "ArborTrackClusterAssociation/TopologicalTrackClusterAssociationAlgorithm.h"

namespace arbor_content
{

pandora::StatusCode TopologicalTrackClusterAssociationAlgorithm::Run()
{
	const pandora::TrackList *pTrackList = NULL;
	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentList(*this, pTrackList));

	if(pTrackList->empty())
		return pandora::STATUS_CODE_SUCCESS;

	const pandora::ClusterList *pClusterList = NULL;
	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentList(*this, pClusterList));

	if(pClusterList->empty())
		return pandora::STATUS_CODE_SUCCESS;

	// reset the track-cluster associations
	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::RemoveCurrentTrackClusterAssociations(*this));

	TrackClusterAssociationMap trackClusterAssociationMap;

	// find the best track to associate to each cluster
	for(pandora::ClusterList::const_iterator clusterIter = pClusterList->begin(), clusterEndIter = pClusterList->end() ;
			clusterEndIter != clusterIter ; ++clusterIter)
	{
		const pandora::Cluster *const pCluster = *clusterIter;

		if(!PandoraContentApi::IsAvailable(*this, pCluster))
			continue;

		const unsigned int innerPseudoLayer = pCluster->GetInnerPseudoLayer();

		if(innerPseudoLayer > m_trackClusterNLayersCut)
			continue;

		pandora::CaloHitList *pFirstLayerCaloHitList = NULL;
		PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pCluster->GetOrderedCaloHitList().GetCaloHitsInPseudoLayer(pCluster->GetInnerPseudoLayer(), pFirstLayerCaloHitList));
		const pandora::Track *pBestTrack = NULL;

		for(pandora::TrackList::const_iterator trackIter = pTrackList->begin(), trackEndIter = pTrackList->end() ;
				trackEndIter != trackIter ; ++trackIter)
		{
			const pandora::Track *const pTrack = *trackIter;

			if(!PandoraContentApi::IsAvailable(*this, pTrack) || !pTrack->ReachesCalorimeter() || !pTrack->CanFormPfo())
				continue;

			const pandora::CartesianVector closestHitPosition(this->GetClosestHitPosition(pTrack, pFirstLayerCaloHitList));
			const float trackClusterDistance = (closestHitPosition - pTrack->GetTrackStateAtCalorimeter().GetPosition()).GetMagnitude();

			if(trackClusterDistance > m_trackClusterDistanceCut)
				continue;

			if(pBestTrack == NULL)
			{
				pBestTrack = pTrack;
				continue;
			}

			const float bestTrackClusterDistance = (closestHitPosition - pBestTrack->GetTrackStateAtCalorimeter().GetPosition()).GetMagnitude();

			if(bestTrackClusterDistance < trackClusterDistance)
				continue;

			pBestTrack = pTrack;
		}

		if(NULL == pBestTrack)
			continue;

		trackClusterAssociationMap[pBestTrack].insert(pCluster);
	}

	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, this->PerformTrackClusterAssociations(trackClusterAssociationMap));

    return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::CartesianVector TopologicalTrackClusterAssociationAlgorithm::GetClosestHitPosition(const pandora::Track *const pTrack, const pandora::CaloHitList *pCaloHitList) const
{
	const pandora::TrackState &trackStateAtCalorimeter(pTrack->GetTrackStateAtCalorimeter());

	pandora::CartesianVector closestHitPosition(0.f, 0.f, 0.f);
	float closestDistance(std::numeric_limits<float>::max());

	for(pandora::CaloHitList::const_iterator iter = pCaloHitList->begin(), endIter = pCaloHitList->end() ;
			endIter != iter ; ++iter)
	{
		const pandora::CaloHit *const pCaloHit = *iter;

		const pandora::CartesianVector differenceVector(pCaloHit->GetPositionVector() - trackStateAtCalorimeter.GetPosition());

		if(differenceVector.GetMagnitude() < closestDistance)
		{
			closestDistance = differenceVector.GetMagnitude();
			closestHitPosition = pCaloHit->GetPositionVector();
		}
	}

	return closestHitPosition;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode TopologicalTrackClusterAssociationAlgorithm::PerformTrackClusterAssociations(const TrackClusterAssociationMap &trackClusterAssociationMap)
{
	if(trackClusterAssociationMap.empty())
		return pandora::STATUS_CODE_SUCCESS;

	for(TrackClusterAssociationMap::const_iterator iter = trackClusterAssociationMap.begin() , endIter = trackClusterAssociationMap.end() ;
			endIter != iter ; ++iter)
	{
		const pandora::Track *const pTrack = iter->first;

		if(NULL == pTrack)
			continue;

		if(iter->second.empty())
			continue;

		const pandora::Cluster *const pCluster = *iter->second.begin();

		for(pandora::ClusterList::const_iterator clusterIter = iter->second.begin() , clusterEndIter = iter->second.end() ;
				clusterEndIter != clusterIter ; ++clusterIter)
		{
			const pandora::Cluster *const pClusterToDelete = *clusterIter;

			if(pClusterToDelete == pCluster)
				continue;

			PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::MergeAndDeleteClusters(*this, pCluster, pClusterToDelete));
		}

		PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::AddTrackClusterAssociation(*this, pTrack, pCluster));
	}

    return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode TopologicalTrackClusterAssociationAlgorithm::ReadSettings(const pandora::TiXmlHandle xmlHandle)
{
	 m_trackClusterNLayersCut = 2;
	 PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
	     "TrackClusterNLayersCut", m_trackClusterNLayersCut));

	 m_trackClusterDistanceCut = 40.f;
	 PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
	     "TrackClusterDistanceCut", m_trackClusterDistanceCut));

    return pandora::STATUS_CODE_SUCCESS;
}

} 

