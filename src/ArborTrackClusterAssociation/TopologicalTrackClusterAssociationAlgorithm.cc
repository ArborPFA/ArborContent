  /// \file TopologicalTrackClusterAssociationAlgorithm.cc
/*
 *
 * TopologicalTrackClusterAssociationAlgorithm.cc source template automatically generated by a class generator
 * Creation date : jeu. avr. 9 2015
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

#include "Pandora/AlgorithmHeaders.h"

#include "ArborTrackClusterAssociation/TopologicalTrackClusterAssociationAlgorithm.h"
#include "ArborHelpers/CaloHitHelper.h"

namespace arbor_content
{

pandora::StatusCode TopologicalTrackClusterAssociationAlgorithm::Run()
{
	const pandora::TrackList *pTrackList = NULL;
	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentList(*this, pTrackList));

	if(pTrackList->empty())
		return pandora::STATUS_CODE_SUCCESS;

	const pandora::ClusterList *pClusterList = NULL;
	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentList(*this, pClusterList));

	if(pClusterList->empty())
		return pandora::STATUS_CODE_SUCCESS;

	// reset the track-cluster associations
	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::RemoveCurrentTrackClusterAssociations(*this));

	TrackClusterAssociationMap trackClusterAssociationMap;
	ClusterToTrackMap redondantTrackAssociation;

	for(pandora::TrackList::const_iterator trackIter = pTrackList->begin(), trackEndIter = pTrackList->end() ;
			trackIter != trackEndIter ; ++trackIter)
	{
		const pandora::Track *pTrack = *trackIter;

		if(!PandoraContentApi::IsAvailable(*this, pTrack))
			continue;

		if(!pTrack->CanFormPfo() || !pTrack->ReachesCalorimeter())
			continue;

		for(pandora::ClusterList::const_iterator clusterIter = pClusterList->begin(), clusterEndIter = pClusterList->end() ;
				clusterEndIter != clusterIter ; ++clusterIter)
		{
			const pandora::Cluster *const pCluster = *clusterIter;

			const unsigned int innerPseudoLayer = pCluster->GetInnerPseudoLayer();

			if(innerPseudoLayer > m_trackClusterNLayersCut)
				continue;

			pandora::CaloHitList firstLayerCaloHitList;

			// get all hits in first pseudo layers
			for(unsigned int pseudoLayer = 1 ; pseudoLayer <= m_trackClusterNLayersCut ; pseudoLayer++)
			{
				pandora::CaloHitList *pPseudoLayerCaloHitList = NULL;

				PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=,
						pCluster->GetOrderedCaloHitList().GetCaloHitsInPseudoLayer(pseudoLayer, pPseudoLayerCaloHitList));

				if(NULL != pPseudoLayerCaloHitList)
					firstLayerCaloHitList.insert(pPseudoLayerCaloHitList->begin(), pPseudoLayerCaloHitList->end());
			}

			bool shouldPerformAssociation = false;

			// look for a seed close to track extrapolation
			for(pandora::CaloHitList::iterator hitIter = firstLayerCaloHitList.begin(), hitEndIter = firstLayerCaloHitList.end() ;
					hitEndIter != hitIter ; ++hitIter)
			{
				const CaloHit *const pCaloHit = dynamic_cast<const CaloHit *const>(*hitIter);

				if(NULL == pCaloHit)
					return pandora::STATUS_CODE_FAILURE;

				if(CaloHitHelper::CanConnect(pTrack, pCaloHit, m_maxNormaleAngle,
						m_maxNormaleDistance, m_maxTransverseAngle, m_maxTransverseDistance))
				{
					shouldPerformAssociation = true;
					break;
				}
			}

			if(!shouldPerformAssociation)
				continue;

			trackClusterAssociationMap[pTrack].insert(pCluster);
			redondantTrackAssociation[pCluster].insert(pTrack);
		}
	}

	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, this->RemoveRedondantTrackAssociations(redondantTrackAssociation, trackClusterAssociationMap));
	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, this->PerformTrackClusterAssociations(trackClusterAssociationMap));

    return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::CartesianVector TopologicalTrackClusterAssociationAlgorithm::GetClosestHitPosition(const pandora::Track *const pTrack, const pandora::CaloHitList *pCaloHitList) const
{
	const pandora::TrackState &trackStateAtCalorimeter(pTrack->GetTrackStateAtCalorimeter());

	pandora::CartesianVector closestHitPosition(0.f, 0.f, 0.f);
	float closestDistance(std::numeric_limits<float>::max());

	for(pandora::CaloHitList::const_iterator iter = pCaloHitList->begin(), endIter = pCaloHitList->end() ;
			endIter != iter ; ++iter)
	{
		const pandora::CaloHit *const pCaloHit = *iter;

		const pandora::CartesianVector differenceVector(pCaloHit->GetPositionVector() - trackStateAtCalorimeter.GetPosition());

		if(differenceVector.GetMagnitude() < closestDistance)
		{
			closestDistance = differenceVector.GetMagnitude();
			closestHitPosition = pCaloHit->GetPositionVector();
		}
	}

	return closestHitPosition;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode TopologicalTrackClusterAssociationAlgorithm::RemoveRedondantTrackAssociations(const ClusterToTrackMap &redondantTrackAssociation, TrackClusterAssociationMap &trackClusterAssociationMap)
{
	for(ClusterToTrackMap::const_iterator iter = redondantTrackAssociation.begin(), endIter = redondantTrackAssociation.end() ;
			endIter != iter ; ++iter)
	{
		if(iter->second.size() <= 1)
			continue;

		const pandora::Cluster *pCluster = iter->first;

		// get cluster hits
		pandora::CaloHitList clusterHits;
		pCluster->GetOrderedCaloHitList().GetCaloHitList(clusterHits);

		const pandora::Track *pBestTrack = NULL;
		float bestTrackClusterDistance = std::numeric_limits<float>::max();

		for(pandora::TrackList::const_iterator trackIter = iter->second.begin(), trackEndIter = iter->second.end() ;
				trackEndIter != trackIter ; ++trackIter)
		{
			const pandora::Track *const pTrack = *trackIter;
			const pandora::TrackState &trackStateAtCalorimeter(pTrack->GetTrackStateAtCalorimeter());

			// find closest hit position to track
			const pandora::CartesianVector closestPosition = this->GetClosestHitPosition(pTrack, &clusterHits);
			const float distance = (trackStateAtCalorimeter.GetPosition() - closestPosition).GetMagnitude();

			if(NULL == pBestTrack)
			{
				bestTrackClusterDistance = distance;
				pBestTrack = pTrack;
				continue;
			}

			// if better
			if(distance < bestTrackClusterDistance)
			{
				trackClusterAssociationMap[pTrack].erase(pCluster);

				bestTrackClusterDistance = distance;
				pBestTrack = pTrack;
			}
			// if worst
			else
			{
				trackClusterAssociationMap[pBestTrack].erase(pCluster);

				bestTrackClusterDistance = distance;
				pBestTrack = pTrack;
			}
		}
	}

    return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode TopologicalTrackClusterAssociationAlgorithm::PerformTrackClusterAssociations(const TrackClusterAssociationMap &trackClusterAssociationMap)
{
	if(trackClusterAssociationMap.empty())
		return pandora::STATUS_CODE_SUCCESS;

	for(TrackClusterAssociationMap::const_iterator iter = trackClusterAssociationMap.begin() , endIter = trackClusterAssociationMap.end() ;
			endIter != iter ; ++iter)
	{
		const pandora::Track *const pTrack = iter->first;

		if(NULL == pTrack)
			continue;

		if(iter->second.empty())
			continue;

		const pandora::Cluster *const pCluster = *iter->second.begin();

		for(pandora::ClusterList::const_iterator clusterIter = iter->second.begin() , clusterEndIter = iter->second.end() ;
				clusterEndIter != clusterIter ; ++clusterIter)
		{
			const pandora::Cluster *const pClusterToDelete = *clusterIter;

			if(pClusterToDelete == pCluster)
				continue;

			PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::MergeAndDeleteClusters(*this, pCluster, pClusterToDelete));
		}

		PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::AddTrackClusterAssociation(*this, pTrack, pCluster));
	}

    return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode TopologicalTrackClusterAssociationAlgorithm::ReadSettings(const pandora::TiXmlHandle xmlHandle)
{
	 m_trackClusterNLayersCut = 2;
	 PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
	     "TrackClusterNLayersCut", m_trackClusterNLayersCut));

//	 m_trackClusterDistanceCut = 40.f;
//	 PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
//	     "TrackClusterDistanceCut", m_trackClusterDistanceCut));

	m_maxNormaleAngle = 1.f;
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
			"MaxNormaleAngle", m_maxNormaleAngle));

	m_maxTransverseAngle = 0.3f;
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
			"MaxTransverseAngle", m_maxTransverseAngle));

	m_maxNormaleDistance = 30.f;
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
			"MaxNormaleDistance", m_maxNormaleDistance));

	m_maxTransverseDistance = m_maxNormaleDistance*2.f;
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
			"MaxTransverseDistance", m_maxTransverseDistance));

    return pandora::STATUS_CODE_SUCCESS;
}

} 

