  /// \file SurroundingHitsMergingAlgorithm.cc
/*
 *
 * SurroundingHitsMergingAlgorithm.cc source template automatically generated by a class generator
 * Creation date : jeu. nov. 19 2015
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "ArborTopologicalAssociation/SurroundingHitsMergingAlgorithm.h"
#include "ArborHelpers/ClusterHelper.h"

#include "Pandora/AlgorithmHeaders.h"

#include "ArborApi/ArborContentApi.h"
#include "ArborObjects/CaloHit.h"

namespace arbor_content
{

pandora::StatusCode SurroundingHitsMergingAlgorithm::Run()
{
	const pandora::CaloHitList *pCaloHitList = NULL;
	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentList(*this, pCaloHitList));

	std::string currentListName;
	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentListName<pandora::CaloHit>(*this, currentListName));

	pandora::CaloHitList availableCaloHitList;
	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, this->GetAvailableCaloHitList(pCaloHitList, availableCaloHitList));

	const pandora::ClusterList *pClusterList = NULL;
	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentList(*this, pClusterList));

	// find cluster candidates for hits merging according to distance first
	MultiClusterInfoMap multiClusterInfoMap;

	for(pandora::CaloHitList::const_iterator hitIter = availableCaloHitList.begin(), hitEndIter = availableCaloHitList.end() ;
			hitEndIter != hitIter ; ++hitIter)
	{
		const pandora::CaloHit *const pCaloHit = *hitIter;
		const pandora::Granularity &granularity( PandoraContentApi::GetGeometry(*this)->GetHitTypeGranularity(pCaloHit->GetHitType()) );

		const float maxCaloHitDistance = granularity <= pandora::FINE ? m_maxCaloHitDistanceFine : m_maxCaloHitDistanceCoarse;
		const float maxCentroidDistance = granularity <= pandora::FINE ? m_maxCentroidDistanceFine : m_maxCentroidDistanceCoarse;

		for(pandora::ClusterList::const_iterator clusterIter = pClusterList->begin(), clusterEndIter = pClusterList->end() ;
				clusterEndIter != clusterIter ; ++clusterIter)
		{
			const pandora::Cluster *const pCluster = *clusterIter;

			// Get calo hit closest distance approach
			float caloHitDistance(std::numeric_limits<float>::max());
			PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, ClusterHelper::GetClosestDistanceApproach(pCluster, pCaloHit->GetPositionVector(), caloHitDistance));

			// get centroid distance
			float centroidDistance(std::numeric_limits<float>::max());
			PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, ClusterHelper::GetCentroidDistance(pCluster, pCaloHit->GetPositionVector(), centroidDistance));

			if(centroidDistance > maxCentroidDistance && caloHitDistance > maxCaloHitDistance)
				continue;

			// calculate normalized generic distance
			float distanceToHit(std::numeric_limits<float>::max());

			if( centroidDistance < maxCentroidDistance )
				distanceToHit = centroidDistance / maxCentroidDistance;

			if( caloHitDistance < maxCaloHitDistance )
				distanceToHit = caloHitDistance / maxCaloHitDistance;

			// compute cluster energy
			float clusterEnergy = 0.f;

			if(PandoraContentApi::GetPlugins(*this)->GetParticleId()->IsEmShower(pCluster))
			{
				clusterEnergy = pCluster->GetCorrectedElectromagneticEnergy(this->GetPandora());
			}
			else
			{
				clusterEnergy = pCluster->GetCorrectedHadronicEnergy(this->GetPandora());
			}

			MultiClusterInfoMap::iterator mapIter = multiClusterInfoMap.find(pCaloHit);

			if(multiClusterInfoMap.end() == mapIter)
				mapIter = multiClusterInfoMap.insert(MultiClusterInfoMap::value_type(pCaloHit, MultiClusterInfo())).first;

			ClusterInfo clusterInfo;
			clusterInfo.m_pCluster = pCluster;
			clusterInfo.m_clusterEnergy = clusterEnergy;
			clusterInfo.m_distanceToHit = distanceToHit;

			mapIter->second.m_clusterInfoVector.push_back(clusterInfo);
			// update total cluster energy
			mapIter->second.m_totalClusterEnergy += clusterEnergy;
		}
	}

	for(MultiClusterInfoMap::const_iterator iter = multiClusterInfoMap.begin(), endIter = multiClusterInfoMap.end() ;
			endIter != iter ; ++iter)
	{
		const pandora::CaloHit *const pCaloHit = iter->first;
		const pandora::Cluster *pBestCluster = NULL;

		const float totalClusterEnergySquared = iter->second.m_totalClusterEnergy*iter->second.m_totalClusterEnergy;
		float bestChi2(std::numeric_limits<float>::max());

		if(iter->second.m_clusterInfoVector.empty())
		{
			continue;
		}
		else if(iter->second.m_clusterInfoVector.size() == 1)
		{
			pBestCluster = iter->second.m_clusterInfoVector.begin()->m_pCluster;
		}
		else
		{
			for(ClusterInfoVector::const_iterator clusterIter = iter->second.m_clusterInfoVector.begin(), clusterEndIter = iter->second.m_clusterInfoVector.end() ;
					clusterEndIter != clusterIter ; ++clusterIter)
			{
				const float clusterEnergySquared = clusterIter->m_clusterEnergy*clusterIter->m_clusterEnergy;
				const float distanceToHitSquared = clusterIter->m_distanceToHit*clusterIter->m_distanceToHit;

				const float chi2 = m_energyWeight*(totalClusterEnergySquared / clusterEnergySquared)+
						m_distanceWeight*(distanceToHitSquared);

				if(chi2 < bestChi2)
				{
					pBestCluster = clusterIter->m_pCluster;
					bestChi2 = chi2;
				}
			}
		}

		PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::AddToCluster(*this, pBestCluster, pCaloHit));
	}

	return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode SurroundingHitsMergingAlgorithm::GetAvailableCaloHitList(const pandora::CaloHitList *const pCaloHitList, pandora::CaloHitList &availableCaloHitList) const
{
	for(pandora::CaloHitList::const_iterator iter = pCaloHitList->begin(), endIter = pCaloHitList->end() ;
			endIter != iter ; ++iter)
	{
		const arbor_content::CaloHit *const pCaloHit = dynamic_cast<const arbor_content::CaloHit *const>(*iter);

		if(PandoraContentApi::IsAvailable<pandora::CaloHit>(*this, pCaloHit))
			availableCaloHitList.insert(pCaloHit);
	}

	return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode SurroundingHitsMergingAlgorithm::ReadSettings(const pandora::TiXmlHandle xmlHandle)
{
	m_maxCaloHitDistanceFine = 100.f;
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
		 "MaxCaloHitDistanceFine", m_maxCaloHitDistanceFine));

	m_maxCaloHitDistanceCoarse = 200.f;
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
		 "MaxCaloHitDistanceCoarse", m_maxCaloHitDistanceCoarse));

	m_maxCentroidDistanceFine = 150.f;
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
		 "MaxCentroidDistanceFine", m_maxCentroidDistanceFine));

	m_maxCentroidDistanceCoarse = 300.f;
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
		 "MaxCentroidDistanceCoarse", m_maxCentroidDistanceCoarse));

	m_distanceWeight = 1.f;
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
		 "DistanceWeight", m_distanceWeight));

	m_energyWeight = 0.f;
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
		 "EnergyWeight", m_energyWeight));

	return pandora::STATUS_CODE_SUCCESS;
}

} 

