  /// \file NearbyTrackPhotonRemovalAlg.cc
/*
 *
 * NearbyTrackPhotonRemovalAlg.cc source template automatically generated by a class generator
 * Creation date : lun. juin 27 2016
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "ArborTopologicalAssociation/NearbyTrackPhotonRemovalAlg.h"

#include "Pandora/AlgorithmHeaders.h"

#include "ArborApi/ArborContentApi.h"
#include "ArborObjects/CaloHit.h"
#include "ArborHelpers/ClusterHelper.h"
#include "ArborHelpers/GeometryHelper.h"

namespace arbor_content
{

pandora::StatusCode NearbyTrackPhotonRemovalAlg::Run()
{
	// get photon cluster list
	const pandora::ClusterList *pClusterList = NULL;
	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetList(*this, m_photonClusterListName, pClusterList));

	pandora::ClusterVector clusterVector(pClusterList->begin(), pClusterList->end());

	// Get the current track list to be used as veto
	const pandora::TrackList *pTrackList = NULL;
	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentList(*this, pTrackList));

	pandora::TrackVector trackVector(pTrackList->begin(), pTrackList->end());

	if(pClusterList->empty() || pTrackList->empty())
		return pandora::STATUS_CODE_SUCCESS;

	const float bField(PandoraContentApi::GetPlugins(*this)->GetBFieldPlugin()->GetBField(pandora::CartesianVector(0.f, 0.f, 0.f)));

	pandora::ClusterVector clusterRemovalList;
	unsigned int totalRemovedNHits(0);

	for(pandora::ClusterVector::const_iterator clusterIter = clusterVector.begin(), clusterEndIter = clusterVector.end() ; clusterEndIter != clusterIter ; ++clusterIter)
	{
		const pandora::Cluster *const pCluster(*clusterIter);

		pandora::CaloHitList clusterCaloHits;
		pCluster->GetOrderedCaloHitList().GetCaloHitList(clusterCaloHits);

		pandora::CaloHitList caloHitListRemoval;

		for(pandora::TrackVector::const_iterator trackIter = trackVector.begin(), trackEndIter = trackVector.end() ;
				trackEndIter != trackIter ; ++trackIter)
		{
			const pandora::Track *const pTrack(*trackIter);

			if(!pTrack->CanFormPfo() || !pTrack->ReachesCalorimeter() || !pTrack->GetDaughterTrackList().empty())
				continue;

			const pandora::Helix helix(pTrack->GetTrackStateAtCalorimeter().GetPosition(),
									pTrack->GetTrackStateAtCalorimeter().GetMomentum(), pTrack->GetCharge(), bField);

			if(helix.GetOmega() > m_maxOmegaTrack)
				continue;

			for(pandora::CaloHitList::const_iterator iter = clusterCaloHits.begin(), endIter = clusterCaloHits.end() ;
					endIter != iter ; ++iter)
			{
				const pandora::CaloHit *const pCaloHit(*iter);

				pandora::CartesianVector projectionOnHelix(0.f, 0.f, 0.f);

				if(pandora::STATUS_CODE_SUCCESS != GeometryHelper::GetProjectionOnHelix(helix, pCaloHit->GetPositionVector(), projectionOnHelix))
						continue;

				const float distanceToHelix((projectionOnHelix-pCaloHit->GetPositionVector()).GetMagnitude());

				if(distanceToHelix > m_maxTrackHitDistance)
					continue;

				caloHitListRemoval.insert(pCaloHit);
				++totalRemovedNHits;
			}
		}

		for(pandora::CaloHitList::const_iterator iter = caloHitListRemoval.begin(), endIter = caloHitListRemoval.end() ;
				endIter != iter ; ++iter)
		{
			PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::RemoveFromCluster(*this, pCluster, *iter));
		}

		const unsigned int nRemainingCaloHits(pCluster->GetNCaloHits());
		const float remainingEnergy(pCluster->GetElectromagneticEnergy());

		if(nRemainingCaloHits < m_minRemainingPhotonNHits || remainingEnergy < m_minRemainingPhotonEnergy)
		{
			clusterRemovalList.push_back(pCluster);
		}
	}

	ARBOR_LOG( "NearbyTrackPhotonRemovalAlg: Will remove " << clusterRemovalList.size() << " photons" << std::endl);
	ARBOR_LOG( "NearbyTrackPhotonRemovalAlg: Removed " << totalRemovedNHits << " hits from photon clusters" << std::endl);

	for(pandora::ClusterVector::const_iterator iter = clusterRemovalList.begin(), endIter = clusterRemovalList.end() ; endIter != iter ; ++iter)
	{
		const pandora::Cluster *const pCluster(*iter);

		for(pandora::ClusterVector::iterator jter = clusterVector.begin(), endJter = clusterVector.end() ; endJter != jter ; ++jter)
		{
			if(*jter == pCluster)
			{
				clusterVector.erase(jter);
				break;
			}
		}

		PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::Delete(*this, pCluster));
	}

	return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode NearbyTrackPhotonRemovalAlg::ReadSettings(const pandora::TiXmlHandle xmlHandle)
{
	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pandora::XmlHelper::ReadValue(xmlHandle,
		 "PhotonClusterListName", m_photonClusterListName));

	m_maxTrackHitDistance = 8.f;
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
		 "MaxTrackHitDistance", m_maxTrackHitDistance));

	m_maxOmegaTrack = 0.f;
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
		 "MaxOmegaTrack", m_maxOmegaTrack));

	m_minRemainingPhotonEnergy = 0.f;
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
		 "MinRemainingPhotonEnergy", m_minRemainingPhotonEnergy));

	m_minRemainingPhotonNHits = 5;
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
		 "MinRemainingPhotonNHits", m_minRemainingPhotonNHits));

	return pandora::STATUS_CODE_SUCCESS;
}

} 

